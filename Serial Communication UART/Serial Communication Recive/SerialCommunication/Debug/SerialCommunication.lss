
SerialCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000904  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000904  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a6  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092b  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010dc  00000000  00000000  0000253d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000418  00000000  00000000  0000361c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006cb  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000835  00000000  00000000  000040ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  7a:	0c 94 80 04 	jmp	0x900	; 0x900 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SSD_Init_BCD>:
		SSD_Display_BCD(number/10);
		Gpio_PinWrite(ssd_Enable_PORT,ssd2_Enable_Pin,FALSE);
		Gpio_PinWrite(ssd_Enable_PORT,ssd1_Enable_Pin,TRUE);
		SSD_Display_BCD(number%10);
	}
}
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	6f ef       	ldi	r22, 0xFF	; 255
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 02 02 	call	0x404	; 0x404 <Gpio_LowerNibbleDirection>
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	88 2f       	mov	r24, r24
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	b9 f0       	breq	.+46     	; 0xd0 <SSD_Init_BCD+0x4e>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	91 05       	cpc	r25, r1
  a6:	1c f4       	brge	.+6      	; 0xae <SSD_Init_BCD+0x2c>
  a8:	89 2b       	or	r24, r25
  aa:	39 f0       	breq	.+14     	; 0xba <SSD_Init_BCD+0x38>
  ac:	32 c0       	rjmp	.+100    	; 0x112 <SSD_Init_BCD+0x90>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	91 05       	cpc	r25, r1
  b2:	c9 f0       	breq	.+50     	; 0xe6 <SSD_Init_BCD+0x64>
  b4:	03 97       	sbiw	r24, 0x03	; 3
  b6:	11 f1       	breq	.+68     	; 0xfc <SSD_Init_BCD+0x7a>
  b8:	2c c0       	rjmp	.+88     	; 0x112 <SSD_Init_BCD+0x90>
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 b7 00 	call	0x16e	; 0x16e <Gpio_PinDirection>
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	64 e0       	ldi	r22, 0x04	; 4
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Gpio_PinWrite>
  ce:	21 c0       	rjmp	.+66     	; 0x112 <SSD_Init_BCD+0x90>
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	68 e0       	ldi	r22, 0x08	; 8
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	0e 94 b7 00 	call	0x16e	; 0x16e <Gpio_PinDirection>
  da:	41 e0       	ldi	r20, 0x01	; 1
  dc:	68 e0       	ldi	r22, 0x08	; 8
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Gpio_PinWrite>
  e4:	16 c0       	rjmp	.+44     	; 0x112 <SSD_Init_BCD+0x90>
  e6:	4f ef       	ldi	r20, 0xFF	; 255
  e8:	60 e4       	ldi	r22, 0x40	; 64
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 b7 00 	call	0x16e	; 0x16e <Gpio_PinDirection>
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	60 e4       	ldi	r22, 0x40	; 64
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Gpio_PinWrite>
  fa:	0b c0       	rjmp	.+22     	; 0x112 <SSD_Init_BCD+0x90>
  fc:	4f ef       	ldi	r20, 0xFF	; 255
  fe:	60 e8       	ldi	r22, 0x80	; 128
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 b7 00 	call	0x16e	; 0x16e <Gpio_PinDirection>
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	60 e8       	ldi	r22, 0x80	; 128
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <Gpio_PinWrite>
 110:	00 00       	nop
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 91 00 	call	0x122	; 0x122 <SSD_Display_BCD>
 118:	00 00       	nop
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <SSD_Display_BCD>:
/**
 * Description: Function to set the Lower Nibble to the value of the number 
 * @param number the number to display [0 to F only]
 */
void SSD_Display_BCD(uint8 number)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	1f 92       	push	r1
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	89 83       	std	Y+1, r24	; 0x01
	Gpio_LowerNibbleDirection(SSD_PORT,SET_OUT);
 12e:	6f ef       	ldi	r22, 0xFF	; 255
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 02 02 	call	0x404	; 0x404 <Gpio_LowerNibbleDirection>
	Gpio_LowerNibbleWrite(SSD_PORT,number);
 136:	69 81       	ldd	r22, Y+1	; 0x01
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 9b 02 	call	0x536	; 0x536 <Gpio_LowerNibbleWrite>
}
 13e:	00 00       	nop
 140:	0f 90       	pop	r0
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <main>:
#include "UART_Lcfg.h"
#include "Gpio.h"
#include "SSD.h"

int main(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	1f 92       	push	r1
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	uint8 data;
	UART_Init(&UART_Cfg_s);
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 03 03 	call	0x606	; 0x606 <UART_Init>
	SSD_Init_BCD(ssd1);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 41 00 	call	0x82	; 0x82 <SSD_Init_BCD>
    while (TRUE) 
    {
		data = UART_Receive();
 160:	0e 94 45 04 	call	0x88a	; 0x88a <UART_Receive>
 164:	89 83       	std	Y+1, r24	; 0x01
		SSD_Display_BCD(data);
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	0e 94 91 00 	call	0x122	; 0x122 <SSD_Display_BCD>
	}
 16c:	f9 cf       	rjmp	.-14     	; 0x160 <main+0x18>

0000016e <Gpio_PinDirection>:
		case MYPORTD :
		result = (PIN_D >> 4);
		break;
	}
	return result;
}
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <Gpio_PinDirection+0x6>
 174:	1f 92       	push	r1
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	6a 83       	std	Y+2, r22	; 0x02
 17e:	4b 83       	std	Y+3, r20	; 0x03
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 05       	cpc	r25, r1
 18a:	81 f1       	breq	.+96     	; 0x1ec <Gpio_PinDirection+0x7e>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	91 05       	cpc	r25, r1
 190:	1c f4       	brge	.+6      	; 0x198 <Gpio_PinDirection+0x2a>
 192:	89 2b       	or	r24, r25
 194:	49 f0       	breq	.+18     	; 0x1a8 <Gpio_PinDirection+0x3a>
 196:	90 c0       	rjmp	.+288    	; 0x2b8 <Gpio_PinDirection+0x14a>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	91 05       	cpc	r25, r1
 19c:	09 f4       	brne	.+2      	; 0x1a0 <Gpio_PinDirection+0x32>
 19e:	48 c0       	rjmp	.+144    	; 0x230 <Gpio_PinDirection+0xc2>
 1a0:	03 97       	sbiw	r24, 0x03	; 3
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <Gpio_PinDirection+0x38>
 1a4:	67 c0       	rjmp	.+206    	; 0x274 <Gpio_PinDirection+0x106>
 1a6:	88 c0       	rjmp	.+272    	; 0x2b8 <Gpio_PinDirection+0x14a>
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	21 f0       	breq	.+8      	; 0x1ba <Gpio_PinDirection+0x4c>
 1b2:	8f 3f       	cpi	r24, 0xFF	; 255
 1b4:	91 05       	cpc	r25, r1
 1b6:	71 f0       	breq	.+28     	; 0x1d4 <Gpio_PinDirection+0x66>
 1b8:	7f c0       	rjmp	.+254    	; 0x2b8 <Gpio_PinDirection+0x14a>
 1ba:	8a e3       	ldi	r24, 0x3A	; 58
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	2a e3       	ldi	r18, 0x3A	; 58
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	32 2f       	mov	r19, r18
 1c8:	2a 81       	ldd	r18, Y+2	; 0x02
 1ca:	20 95       	com	r18
 1cc:	23 23       	and	r18, r19
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <Gpio_PinDirection+0x7c>
 1d4:	8a e3       	ldi	r24, 0x3A	; 58
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	2a e3       	ldi	r18, 0x3A	; 58
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	f9 01       	movw	r30, r18
 1de:	30 81       	ld	r19, Z
 1e0:	2a 81       	ldd	r18, Y+2	; 0x02
 1e2:	23 2b       	or	r18, r19
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
 1e8:	00 00       	nop
 1ea:	66 c0       	rjmp	.+204    	; 0x2b8 <Gpio_PinDirection+0x14a>
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	21 f0       	breq	.+8      	; 0x1fe <Gpio_PinDirection+0x90>
 1f6:	8f 3f       	cpi	r24, 0xFF	; 255
 1f8:	91 05       	cpc	r25, r1
 1fa:	71 f0       	breq	.+28     	; 0x218 <Gpio_PinDirection+0xaa>
 1fc:	5d c0       	rjmp	.+186    	; 0x2b8 <Gpio_PinDirection+0x14a>
 1fe:	87 e3       	ldi	r24, 0x37	; 55
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	27 e3       	ldi	r18, 0x37	; 55
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	32 2f       	mov	r19, r18
 20c:	2a 81       	ldd	r18, Y+2	; 0x02
 20e:	20 95       	com	r18
 210:	23 23       	and	r18, r19
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
 216:	0b c0       	rjmp	.+22     	; 0x22e <Gpio_PinDirection+0xc0>
 218:	87 e3       	ldi	r24, 0x37	; 55
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	27 e3       	ldi	r18, 0x37	; 55
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	30 81       	ld	r19, Z
 224:	2a 81       	ldd	r18, Y+2	; 0x02
 226:	23 2b       	or	r18, r19
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
 22c:	00 00       	nop
 22e:	44 c0       	rjmp	.+136    	; 0x2b8 <Gpio_PinDirection+0x14a>
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	88 2f       	mov	r24, r24
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	21 f0       	breq	.+8      	; 0x242 <Gpio_PinDirection+0xd4>
 23a:	8f 3f       	cpi	r24, 0xFF	; 255
 23c:	91 05       	cpc	r25, r1
 23e:	71 f0       	breq	.+28     	; 0x25c <Gpio_PinDirection+0xee>
 240:	3b c0       	rjmp	.+118    	; 0x2b8 <Gpio_PinDirection+0x14a>
 242:	84 e3       	ldi	r24, 0x34	; 52
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	24 e3       	ldi	r18, 0x34	; 52
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	20 81       	ld	r18, Z
 24e:	32 2f       	mov	r19, r18
 250:	2a 81       	ldd	r18, Y+2	; 0x02
 252:	20 95       	com	r18
 254:	23 23       	and	r18, r19
 256:	fc 01       	movw	r30, r24
 258:	20 83       	st	Z, r18
 25a:	0b c0       	rjmp	.+22     	; 0x272 <Gpio_PinDirection+0x104>
 25c:	84 e3       	ldi	r24, 0x34	; 52
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	24 e3       	ldi	r18, 0x34	; 52
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	30 81       	ld	r19, Z
 268:	2a 81       	ldd	r18, Y+2	; 0x02
 26a:	23 2b       	or	r18, r19
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
 270:	00 00       	nop
 272:	22 c0       	rjmp	.+68     	; 0x2b8 <Gpio_PinDirection+0x14a>
 274:	8b 81       	ldd	r24, Y+3	; 0x03
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	00 97       	sbiw	r24, 0x00	; 0
 27c:	21 f0       	breq	.+8      	; 0x286 <Gpio_PinDirection+0x118>
 27e:	8f 3f       	cpi	r24, 0xFF	; 255
 280:	91 05       	cpc	r25, r1
 282:	71 f0       	breq	.+28     	; 0x2a0 <Gpio_PinDirection+0x132>
 284:	18 c0       	rjmp	.+48     	; 0x2b6 <Gpio_PinDirection+0x148>
 286:	81 e3       	ldi	r24, 0x31	; 49
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	21 e3       	ldi	r18, 0x31	; 49
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	20 81       	ld	r18, Z
 292:	32 2f       	mov	r19, r18
 294:	2a 81       	ldd	r18, Y+2	; 0x02
 296:	20 95       	com	r18
 298:	23 23       	and	r18, r19
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
 29e:	0b c0       	rjmp	.+22     	; 0x2b6 <Gpio_PinDirection+0x148>
 2a0:	81 e3       	ldi	r24, 0x31	; 49
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	21 e3       	ldi	r18, 0x31	; 49
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	30 81       	ld	r19, Z
 2ac:	2a 81       	ldd	r18, Y+2	; 0x02
 2ae:	23 2b       	or	r18, r19
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
 2b4:	00 00       	nop
 2b6:	00 00       	nop
 2b8:	00 00       	nop
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <Gpio_PinWrite>:
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	00 d0       	rcall	.+0      	; 0x2cc <Gpio_PinWrite+0x6>
 2cc:	1f 92       	push	r1
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	89 83       	std	Y+1, r24	; 0x01
 2d4:	6a 83       	std	Y+2, r22	; 0x02
 2d6:	4b 83       	std	Y+3, r20	; 0x03
 2d8:	8b 81       	ldd	r24, Y+3	; 0x03
 2da:	88 2f       	mov	r24, r24
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	00 97       	sbiw	r24, 0x00	; 0
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <Gpio_PinWrite+0x1e>
 2e2:	42 c0       	rjmp	.+132    	; 0x368 <Gpio_PinWrite+0xa2>
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	09 f0       	breq	.+2      	; 0x2ea <Gpio_PinWrite+0x24>
 2e8:	86 c0       	rjmp	.+268    	; 0x3f6 <Gpio_PinWrite+0x130>
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	88 2f       	mov	r24, r24
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	91 05       	cpc	r25, r1
 2f4:	b9 f0       	breq	.+46     	; 0x324 <Gpio_PinWrite+0x5e>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	91 05       	cpc	r25, r1
 2fa:	1c f4       	brge	.+6      	; 0x302 <Gpio_PinWrite+0x3c>
 2fc:	89 2b       	or	r24, r25
 2fe:	39 f0       	breq	.+14     	; 0x30e <Gpio_PinWrite+0x48>
 300:	7a c0       	rjmp	.+244    	; 0x3f6 <Gpio_PinWrite+0x130>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	91 05       	cpc	r25, r1
 306:	c9 f0       	breq	.+50     	; 0x33a <Gpio_PinWrite+0x74>
 308:	03 97       	sbiw	r24, 0x03	; 3
 30a:	11 f1       	breq	.+68     	; 0x350 <Gpio_PinWrite+0x8a>
 30c:	74 c0       	rjmp	.+232    	; 0x3f6 <Gpio_PinWrite+0x130>
 30e:	8b e3       	ldi	r24, 0x3B	; 59
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	2b e3       	ldi	r18, 0x3B	; 59
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	f9 01       	movw	r30, r18
 318:	30 81       	ld	r19, Z
 31a:	2a 81       	ldd	r18, Y+2	; 0x02
 31c:	23 2b       	or	r18, r19
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
 322:	21 c0       	rjmp	.+66     	; 0x366 <Gpio_PinWrite+0xa0>
 324:	88 e3       	ldi	r24, 0x38	; 56
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	28 e3       	ldi	r18, 0x38	; 56
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	30 81       	ld	r19, Z
 330:	2a 81       	ldd	r18, Y+2	; 0x02
 332:	23 2b       	or	r18, r19
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
 338:	16 c0       	rjmp	.+44     	; 0x366 <Gpio_PinWrite+0xa0>
 33a:	85 e3       	ldi	r24, 0x35	; 53
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	25 e3       	ldi	r18, 0x35	; 53
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	30 81       	ld	r19, Z
 346:	2a 81       	ldd	r18, Y+2	; 0x02
 348:	23 2b       	or	r18, r19
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
 34e:	0b c0       	rjmp	.+22     	; 0x366 <Gpio_PinWrite+0xa0>
 350:	82 e3       	ldi	r24, 0x32	; 50
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	22 e3       	ldi	r18, 0x32	; 50
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	f9 01       	movw	r30, r18
 35a:	30 81       	ld	r19, Z
 35c:	2a 81       	ldd	r18, Y+2	; 0x02
 35e:	23 2b       	or	r18, r19
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
 364:	00 00       	nop
 366:	47 c0       	rjmp	.+142    	; 0x3f6 <Gpio_PinWrite+0x130>
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	91 05       	cpc	r25, r1
 372:	c9 f0       	breq	.+50     	; 0x3a6 <Gpio_PinWrite+0xe0>
 374:	82 30       	cpi	r24, 0x02	; 2
 376:	91 05       	cpc	r25, r1
 378:	1c f4       	brge	.+6      	; 0x380 <Gpio_PinWrite+0xba>
 37a:	89 2b       	or	r24, r25
 37c:	39 f0       	breq	.+14     	; 0x38c <Gpio_PinWrite+0xc6>
 37e:	3a c0       	rjmp	.+116    	; 0x3f4 <Gpio_PinWrite+0x12e>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	91 05       	cpc	r25, r1
 384:	e9 f0       	breq	.+58     	; 0x3c0 <Gpio_PinWrite+0xfa>
 386:	03 97       	sbiw	r24, 0x03	; 3
 388:	41 f1       	breq	.+80     	; 0x3da <Gpio_PinWrite+0x114>
 38a:	34 c0       	rjmp	.+104    	; 0x3f4 <Gpio_PinWrite+0x12e>
 38c:	8b e3       	ldi	r24, 0x3B	; 59
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	2b e3       	ldi	r18, 0x3B	; 59
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	20 81       	ld	r18, Z
 398:	32 2f       	mov	r19, r18
 39a:	2a 81       	ldd	r18, Y+2	; 0x02
 39c:	20 95       	com	r18
 39e:	23 23       	and	r18, r19
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
 3a4:	27 c0       	rjmp	.+78     	; 0x3f4 <Gpio_PinWrite+0x12e>
 3a6:	88 e3       	ldi	r24, 0x38	; 56
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	28 e3       	ldi	r18, 0x38	; 56
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	f9 01       	movw	r30, r18
 3b0:	20 81       	ld	r18, Z
 3b2:	32 2f       	mov	r19, r18
 3b4:	2a 81       	ldd	r18, Y+2	; 0x02
 3b6:	20 95       	com	r18
 3b8:	23 23       	and	r18, r19
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
 3be:	1a c0       	rjmp	.+52     	; 0x3f4 <Gpio_PinWrite+0x12e>
 3c0:	85 e3       	ldi	r24, 0x35	; 53
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	25 e3       	ldi	r18, 0x35	; 53
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	f9 01       	movw	r30, r18
 3ca:	20 81       	ld	r18, Z
 3cc:	32 2f       	mov	r19, r18
 3ce:	2a 81       	ldd	r18, Y+2	; 0x02
 3d0:	20 95       	com	r18
 3d2:	23 23       	and	r18, r19
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <Gpio_PinWrite+0x12e>
 3da:	82 e3       	ldi	r24, 0x32	; 50
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	22 e3       	ldi	r18, 0x32	; 50
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	20 81       	ld	r18, Z
 3e6:	32 2f       	mov	r19, r18
 3e8:	2a 81       	ldd	r18, Y+2	; 0x02
 3ea:	20 95       	com	r18
 3ec:	23 23       	and	r18, r19
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
 3f2:	00 00       	nop
 3f4:	00 00       	nop
 3f6:	00 00       	nop
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <Gpio_LowerNibbleDirection>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	00 d0       	rcall	.+0      	; 0x40a <Gpio_LowerNibbleDirection+0x6>
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	89 83       	std	Y+1, r24	; 0x01
 410:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	91 05       	cpc	r25, r1
 41c:	61 f1       	breq	.+88     	; 0x476 <Gpio_LowerNibbleDirection+0x72>
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	91 05       	cpc	r25, r1
 422:	1c f4       	brge	.+6      	; 0x42a <Gpio_LowerNibbleDirection+0x26>
 424:	89 2b       	or	r24, r25
 426:	49 f0       	breq	.+18     	; 0x43a <Gpio_LowerNibbleDirection+0x36>
				break;
			}
		}
		break;
	}
}
 428:	80 c0       	rjmp	.+256    	; 0x52a <Gpio_LowerNibbleDirection+0x126>
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
	switch(port)
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	91 05       	cpc	r25, r1
 42e:	09 f4       	brne	.+2      	; 0x432 <Gpio_LowerNibbleDirection+0x2e>
 430:	40 c0       	rjmp	.+128    	; 0x4b2 <Gpio_LowerNibbleDirection+0xae>
 432:	03 97       	sbiw	r24, 0x03	; 3
 434:	09 f4       	brne	.+2      	; 0x438 <Gpio_LowerNibbleDirection+0x34>
 436:	5b c0       	rjmp	.+182    	; 0x4ee <Gpio_LowerNibbleDirection+0xea>
				break;
			}
		}
		break;
	}
}
 438:	78 c0       	rjmp	.+240    	; 0x52a <Gpio_LowerNibbleDirection+0x126>
{
	switch(port)
	{
		case MYPORTA :
		{
			switch(direction)
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	88 2f       	mov	r24, r24
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	00 97       	sbiw	r24, 0x00	; 0
 442:	21 f0       	breq	.+8      	; 0x44c <Gpio_LowerNibbleDirection+0x48>
 444:	8f 3f       	cpi	r24, 0xFF	; 255
 446:	91 05       	cpc	r25, r1
 448:	59 f0       	breq	.+22     	; 0x460 <Gpio_LowerNibbleDirection+0x5c>
				case SET_OUT :
				DDR_A |= 0x0f;
				break;
			}
		}
		break;
 44a:	6f c0       	rjmp	.+222    	; 0x52a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTA :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_A &= 0xf0;
 44c:	8a e3       	ldi	r24, 0x3A	; 58
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	2a e3       	ldi	r18, 0x3A	; 58
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	20 81       	ld	r18, Z
 458:	20 7f       	andi	r18, 0xF0	; 240
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
				break;
 45e:	0a c0       	rjmp	.+20     	; 0x474 <Gpio_LowerNibbleDirection+0x70>
				case SET_OUT :
				DDR_A |= 0x0f;
 460:	8a e3       	ldi	r24, 0x3A	; 58
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	2a e3       	ldi	r18, 0x3A	; 58
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	f9 01       	movw	r30, r18
 46a:	20 81       	ld	r18, Z
 46c:	2f 60       	ori	r18, 0x0F	; 15
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
				break;
 472:	00 00       	nop
			}
		}
		break;
 474:	5a c0       	rjmp	.+180    	; 0x52a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	88 2f       	mov	r24, r24
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	00 97       	sbiw	r24, 0x00	; 0
 47e:	21 f0       	breq	.+8      	; 0x488 <Gpio_LowerNibbleDirection+0x84>
 480:	8f 3f       	cpi	r24, 0xFF	; 255
 482:	91 05       	cpc	r25, r1
 484:	59 f0       	breq	.+22     	; 0x49c <Gpio_LowerNibbleDirection+0x98>
				case SET_OUT :
				DDR_B |= 0x0f;
				break;
			}
		}
		break;
 486:	51 c0       	rjmp	.+162    	; 0x52a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_B &= 0xf0;
 488:	87 e3       	ldi	r24, 0x37	; 55
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	27 e3       	ldi	r18, 0x37	; 55
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	f9 01       	movw	r30, r18
 492:	20 81       	ld	r18, Z
 494:	20 7f       	andi	r18, 0xF0	; 240
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
				break;
 49a:	0a c0       	rjmp	.+20     	; 0x4b0 <Gpio_LowerNibbleDirection+0xac>
				case SET_OUT :
				DDR_B |= 0x0f;
 49c:	87 e3       	ldi	r24, 0x37	; 55
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	27 e3       	ldi	r18, 0x37	; 55
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	f9 01       	movw	r30, r18
 4a6:	20 81       	ld	r18, Z
 4a8:	2f 60       	ori	r18, 0x0F	; 15
 4aa:	fc 01       	movw	r30, r24
 4ac:	20 83       	st	Z, r18
				break;
 4ae:	00 00       	nop
			}
		}
		break;
 4b0:	3c c0       	rjmp	.+120    	; 0x52a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
 4b2:	8a 81       	ldd	r24, Y+2	; 0x02
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	21 f0       	breq	.+8      	; 0x4c4 <Gpio_LowerNibbleDirection+0xc0>
 4bc:	8f 3f       	cpi	r24, 0xFF	; 255
 4be:	91 05       	cpc	r25, r1
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <Gpio_LowerNibbleDirection+0xd4>
				case SET_OUT :
				DDR_C |= 0x0f;
				break;
			}
		}
		break;
 4c2:	33 c0       	rjmp	.+102    	; 0x52a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= 0xf0;
 4c4:	84 e3       	ldi	r24, 0x34	; 52
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	24 e3       	ldi	r18, 0x34	; 52
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	f9 01       	movw	r30, r18
 4ce:	20 81       	ld	r18, Z
 4d0:	20 7f       	andi	r18, 0xF0	; 240
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
				break;
 4d6:	0a c0       	rjmp	.+20     	; 0x4ec <Gpio_LowerNibbleDirection+0xe8>
				case SET_OUT :
				DDR_C |= 0x0f;
 4d8:	84 e3       	ldi	r24, 0x34	; 52
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	24 e3       	ldi	r18, 0x34	; 52
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	f9 01       	movw	r30, r18
 4e2:	20 81       	ld	r18, Z
 4e4:	2f 60       	ori	r18, 0x0F	; 15
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
				break;
 4ea:	00 00       	nop
			}
		}
		break;
 4ec:	1e c0       	rjmp	.+60     	; 0x52a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTD :
		{
			switch(direction)
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	21 f0       	breq	.+8      	; 0x500 <Gpio_LowerNibbleDirection+0xfc>
 4f8:	8f 3f       	cpi	r24, 0xFF	; 255
 4fa:	91 05       	cpc	r25, r1
 4fc:	59 f0       	breq	.+22     	; 0x514 <Gpio_LowerNibbleDirection+0x110>
				case SET_OUT :
				DDR_D |= 0x0f;
				break;
			}
		}
		break;
 4fe:	14 c0       	rjmp	.+40     	; 0x528 <Gpio_LowerNibbleDirection+0x124>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= 0xf0;
 500:	81 e3       	ldi	r24, 0x31	; 49
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	21 e3       	ldi	r18, 0x31	; 49
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	20 81       	ld	r18, Z
 50c:	20 7f       	andi	r18, 0xF0	; 240
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
				break;
 512:	0a c0       	rjmp	.+20     	; 0x528 <Gpio_LowerNibbleDirection+0x124>
				case SET_OUT :
				DDR_D |= 0x0f;
 514:	81 e3       	ldi	r24, 0x31	; 49
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	21 e3       	ldi	r18, 0x31	; 49
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f9 01       	movw	r30, r18
 51e:	20 81       	ld	r18, Z
 520:	2f 60       	ori	r18, 0x0F	; 15
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
				break;
 526:	00 00       	nop
			}
		}
		break;
 528:	00 00       	nop
	}
}
 52a:	00 00       	nop
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <Gpio_LowerNibbleWrite>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	00 d0       	rcall	.+0      	; 0x53c <Gpio_LowerNibbleWrite+0x6>
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	89 83       	std	Y+1, r24	; 0x01
 542:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	88 2f       	mov	r24, r24
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	91 05       	cpc	r25, r1
 54e:	d1 f0       	breq	.+52     	; 0x584 <Gpio_LowerNibbleWrite+0x4e>
 550:	82 30       	cpi	r24, 0x02	; 2
 552:	91 05       	cpc	r25, r1
 554:	1c f4       	brge	.+6      	; 0x55c <Gpio_LowerNibbleWrite+0x26>
 556:	89 2b       	or	r24, r25
 558:	39 f0       	breq	.+14     	; 0x568 <Gpio_LowerNibbleWrite+0x32>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
 55a:	3e c0       	rjmp	.+124    	; 0x5d8 <Gpio_LowerNibbleWrite+0xa2>
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
 55c:	82 30       	cpi	r24, 0x02	; 2
 55e:	91 05       	cpc	r25, r1
 560:	f9 f0       	breq	.+62     	; 0x5a0 <Gpio_LowerNibbleWrite+0x6a>
 562:	03 97       	sbiw	r24, 0x03	; 3
 564:	59 f1       	breq	.+86     	; 0x5bc <Gpio_LowerNibbleWrite+0x86>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
 566:	38 c0       	rjmp	.+112    	; 0x5d8 <Gpio_LowerNibbleWrite+0xa2>
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A = (PORT_A & 0xf0) | (value & 0x0f);
 568:	8b e3       	ldi	r24, 0x3B	; 59
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	2b e3       	ldi	r18, 0x3B	; 59
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	32 2f       	mov	r19, r18
 576:	30 7f       	andi	r19, 0xF0	; 240
 578:	2a 81       	ldd	r18, Y+2	; 0x02
 57a:	2f 70       	andi	r18, 0x0F	; 15
 57c:	23 2b       	or	r18, r19
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
		break;
 582:	2a c0       	rjmp	.+84     	; 0x5d8 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTB :
		PORT_B = (PORT_B & 0xf0) | (value & 0x0f);
 584:	88 e3       	ldi	r24, 0x38	; 56
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	28 e3       	ldi	r18, 0x38	; 56
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	f9 01       	movw	r30, r18
 58e:	20 81       	ld	r18, Z
 590:	32 2f       	mov	r19, r18
 592:	30 7f       	andi	r19, 0xF0	; 240
 594:	2a 81       	ldd	r18, Y+2	; 0x02
 596:	2f 70       	andi	r18, 0x0F	; 15
 598:	23 2b       	or	r18, r19
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
		break;
 59e:	1c c0       	rjmp	.+56     	; 0x5d8 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTC :
		PORT_C = (PORT_C & 0xf0) | (value & 0x0f);
 5a0:	85 e3       	ldi	r24, 0x35	; 53
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	25 e3       	ldi	r18, 0x35	; 53
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	32 2f       	mov	r19, r18
 5ae:	30 7f       	andi	r19, 0xF0	; 240
 5b0:	2a 81       	ldd	r18, Y+2	; 0x02
 5b2:	2f 70       	andi	r18, 0x0F	; 15
 5b4:	23 2b       	or	r18, r19
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 83       	st	Z, r18
		break;
 5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
 5bc:	82 e3       	ldi	r24, 0x32	; 50
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	22 e3       	ldi	r18, 0x32	; 50
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	f9 01       	movw	r30, r18
 5c6:	20 81       	ld	r18, Z
 5c8:	32 2f       	mov	r19, r18
 5ca:	30 7f       	andi	r19, 0xF0	; 240
 5cc:	2a 81       	ldd	r18, Y+2	; 0x02
 5ce:	2f 70       	andi	r18, 0x0F	; 15
 5d0:	23 2b       	or	r18, r19
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
		break;
 5d6:	00 00       	nop
	}
}
 5d8:	00 00       	nop
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <Interrupts_On>:
 * Description : This function is used to turn On the global interrupt mask
 * Return : the function Returns nothing
 */

void Interrupts_On(void)
{     
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
 5ec:	8f e5       	ldi	r24, 0x5F	; 95
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	2f e5       	ldi	r18, 0x5F	; 95
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	f9 01       	movw	r30, r18
 5f6:	20 81       	ld	r18, Z
 5f8:	20 68       	ori	r18, 0x80	; 128
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
}
 5fe:	00 00       	nop
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <UART_Init>:
	/* Wait for empty transmit buffer */
	while ( GET_BIT(UART_UCSRA,UDRE) == FALSE );
	//while ( !( UCSRA & (1<<UDRE)) );
	UART_UDR = data;
	return OK;
}
 606:	ef 92       	push	r14
 608:	ff 92       	push	r15
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	00 d0       	rcall	.+0      	; 0x614 <UART_Init+0xe>
 614:	00 d0       	rcall	.+0      	; 0x616 <UART_Init+0x10>
 616:	1f 92       	push	r1
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	9d 83       	std	Y+5, r25	; 0x05
 61e:	8c 83       	std	Y+4, r24	; 0x04
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	89 83       	std	Y+1, r24	; 0x01
 624:	8c 81       	ldd	r24, Y+4	; 0x04
 626:	9d 81       	ldd	r25, Y+5	; 0x05
 628:	fc 01       	movw	r30, r24
 62a:	21 85       	ldd	r18, Z+9	; 0x09
 62c:	32 85       	ldd	r19, Z+10	; 0x0a
 62e:	43 85       	ldd	r20, Z+11	; 0x0b
 630:	54 85       	ldd	r21, Z+12	; 0x0c
 632:	8c 81       	ldd	r24, Y+4	; 0x04
 634:	9d 81       	ldd	r25, Y+5	; 0x05
 636:	fc 01       	movw	r30, r24
 638:	80 81       	ld	r24, Z
 63a:	91 81       	ldd	r25, Z+1	; 0x01
 63c:	a2 81       	ldd	r26, Z+2	; 0x02
 63e:	b3 81       	ldd	r27, Z+3	; 0x03
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	aa 1f       	adc	r26, r26
 646:	bb 1f       	adc	r27, r27
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	aa 1f       	adc	r26, r26
 64e:	bb 1f       	adc	r27, r27
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	aa 1f       	adc	r26, r26
 656:	bb 1f       	adc	r27, r27
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	aa 1f       	adc	r26, r26
 65e:	bb 1f       	adc	r27, r27
 660:	7c 01       	movw	r14, r24
 662:	8d 01       	movw	r16, r26
 664:	ca 01       	movw	r24, r20
 666:	b9 01       	movw	r22, r18
 668:	a8 01       	movw	r20, r16
 66a:	97 01       	movw	r18, r14
 66c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__udivmodsi4>
 670:	da 01       	movw	r26, r20
 672:	c9 01       	movw	r24, r18
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	9b 83       	std	Y+3, r25	; 0x03
 678:	8a 83       	std	Y+2, r24	; 0x02
 67a:	89 e2       	ldi	r24, 0x29	; 41
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	2a 81       	ldd	r18, Y+2	; 0x02
 680:	fc 01       	movw	r30, r24
 682:	20 83       	st	Z, r18
 684:	80 e4       	ldi	r24, 0x40	; 64
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	20 e4       	ldi	r18, 0x40	; 64
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	f9 01       	movw	r30, r18
 68e:	20 81       	ld	r18, Z
 690:	42 2f       	mov	r20, r18
 692:	2a 81       	ldd	r18, Y+2	; 0x02
 694:	3b 81       	ldd	r19, Y+3	; 0x03
 696:	23 2f       	mov	r18, r19
 698:	33 27       	eor	r19, r19
 69a:	24 2b       	or	r18, r20
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
 6a0:	80 e4       	ldi	r24, 0x40	; 64
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	20 e4       	ldi	r18, 0x40	; 64
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	20 81       	ld	r18, Z
 6ac:	22 60       	ori	r18, 0x02	; 2
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
 6b2:	80 e4       	ldi	r24, 0x40	; 64
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	20 e4       	ldi	r18, 0x40	; 64
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	f9 01       	movw	r30, r18
 6bc:	20 81       	ld	r18, Z
 6be:	24 60       	ori	r18, 0x04	; 4
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
 6c4:	8a e2       	ldi	r24, 0x2A	; 42
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	2a e2       	ldi	r18, 0x2A	; 42
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	f9 01       	movw	r30, r18
 6ce:	20 81       	ld	r18, Z
 6d0:	2b 7f       	andi	r18, 0xFB	; 251
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
 6d6:	8c 81       	ldd	r24, Y+4	; 0x04
 6d8:	9d 81       	ldd	r25, Y+5	; 0x05
 6da:	fc 01       	movw	r30, r24
 6dc:	84 81       	ldd	r24, Z+4	; 0x04
 6de:	88 2f       	mov	r24, r24
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	61 f0       	breq	.+24     	; 0x6fe <UART_Init+0xf8>
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	a1 f4       	brne	.+40     	; 0x712 <UART_Init+0x10c>
 6ea:	8a e2       	ldi	r24, 0x2A	; 42
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	2a e2       	ldi	r18, 0x2A	; 42
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	f9 01       	movw	r30, r18
 6f4:	20 81       	ld	r18, Z
 6f6:	20 61       	ori	r18, 0x10	; 16
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 83       	st	Z, r18
 6fc:	0c c0       	rjmp	.+24     	; 0x716 <UART_Init+0x110>
 6fe:	8a e2       	ldi	r24, 0x2A	; 42
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	2a e2       	ldi	r18, 0x2A	; 42
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	f9 01       	movw	r30, r18
 708:	20 81       	ld	r18, Z
 70a:	2f 7e       	andi	r18, 0xEF	; 239
 70c:	fc 01       	movw	r30, r24
 70e:	20 83       	st	Z, r18
 710:	02 c0       	rjmp	.+4      	; 0x716 <UART_Init+0x110>
 712:	19 82       	std	Y+1, r1	; 0x01
 714:	00 00       	nop
 716:	8c 81       	ldd	r24, Y+4	; 0x04
 718:	9d 81       	ldd	r25, Y+5	; 0x05
 71a:	fc 01       	movw	r30, r24
 71c:	85 81       	ldd	r24, Z+5	; 0x05
 71e:	88 2f       	mov	r24, r24
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	00 97       	sbiw	r24, 0x00	; 0
 724:	61 f0       	breq	.+24     	; 0x73e <UART_Init+0x138>
 726:	01 97       	sbiw	r24, 0x01	; 1
 728:	a1 f4       	brne	.+40     	; 0x752 <UART_Init+0x14c>
 72a:	8a e2       	ldi	r24, 0x2A	; 42
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	2a e2       	ldi	r18, 0x2A	; 42
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	f9 01       	movw	r30, r18
 734:	20 81       	ld	r18, Z
 736:	28 60       	ori	r18, 0x08	; 8
 738:	fc 01       	movw	r30, r24
 73a:	20 83       	st	Z, r18
 73c:	0c c0       	rjmp	.+24     	; 0x756 <UART_Init+0x150>
 73e:	8a e2       	ldi	r24, 0x2A	; 42
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	2a e2       	ldi	r18, 0x2A	; 42
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	f9 01       	movw	r30, r18
 748:	20 81       	ld	r18, Z
 74a:	27 7f       	andi	r18, 0xF7	; 247
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
 750:	02 c0       	rjmp	.+4      	; 0x756 <UART_Init+0x150>
 752:	19 82       	std	Y+1, r1	; 0x01
 754:	00 00       	nop
 756:	8c 81       	ldd	r24, Y+4	; 0x04
 758:	9d 81       	ldd	r25, Y+5	; 0x05
 75a:	fc 01       	movw	r30, r24
 75c:	86 81       	ldd	r24, Z+6	; 0x06
 75e:	88 2f       	mov	r24, r24
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	81 30       	cpi	r24, 0x01	; 1
 764:	91 05       	cpc	r25, r1
 766:	c1 f0       	breq	.+48     	; 0x798 <UART_Init+0x192>
 768:	82 30       	cpi	r24, 0x02	; 2
 76a:	91 05       	cpc	r25, r1
 76c:	41 f1       	breq	.+80     	; 0x7be <UART_Init+0x1b8>
 76e:	89 2b       	or	r24, r25
 770:	c9 f5       	brne	.+114    	; 0x7e4 <UART_Init+0x1de>
 772:	80 e4       	ldi	r24, 0x40	; 64
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	20 e4       	ldi	r18, 0x40	; 64
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	f9 01       	movw	r30, r18
 77c:	20 81       	ld	r18, Z
 77e:	2f 7e       	andi	r18, 0xEF	; 239
 780:	fc 01       	movw	r30, r24
 782:	20 83       	st	Z, r18
 784:	80 e4       	ldi	r24, 0x40	; 64
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	20 e4       	ldi	r18, 0x40	; 64
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	f9 01       	movw	r30, r18
 78e:	20 81       	ld	r18, Z
 790:	2f 7d       	andi	r18, 0xDF	; 223
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
 796:	28 c0       	rjmp	.+80     	; 0x7e8 <UART_Init+0x1e2>
 798:	80 e4       	ldi	r24, 0x40	; 64
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	20 e4       	ldi	r18, 0x40	; 64
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	f9 01       	movw	r30, r18
 7a2:	20 81       	ld	r18, Z
 7a4:	2f 7e       	andi	r18, 0xEF	; 239
 7a6:	fc 01       	movw	r30, r24
 7a8:	20 83       	st	Z, r18
 7aa:	80 e4       	ldi	r24, 0x40	; 64
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	20 e4       	ldi	r18, 0x40	; 64
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	f9 01       	movw	r30, r18
 7b4:	20 81       	ld	r18, Z
 7b6:	20 62       	ori	r18, 0x20	; 32
 7b8:	fc 01       	movw	r30, r24
 7ba:	20 83       	st	Z, r18
 7bc:	15 c0       	rjmp	.+42     	; 0x7e8 <UART_Init+0x1e2>
 7be:	80 e4       	ldi	r24, 0x40	; 64
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	20 e4       	ldi	r18, 0x40	; 64
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	f9 01       	movw	r30, r18
 7c8:	20 81       	ld	r18, Z
 7ca:	20 61       	ori	r18, 0x10	; 16
 7cc:	fc 01       	movw	r30, r24
 7ce:	20 83       	st	Z, r18
 7d0:	80 e4       	ldi	r24, 0x40	; 64
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	20 e4       	ldi	r18, 0x40	; 64
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	f9 01       	movw	r30, r18
 7da:	20 81       	ld	r18, Z
 7dc:	20 62       	ori	r18, 0x20	; 32
 7de:	fc 01       	movw	r30, r24
 7e0:	20 83       	st	Z, r18
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <UART_Init+0x1e2>
 7e4:	19 82       	std	Y+1, r1	; 0x01
 7e6:	00 00       	nop
 7e8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ea:	9d 81       	ldd	r25, Y+5	; 0x05
 7ec:	fc 01       	movw	r30, r24
 7ee:	87 81       	ldd	r24, Z+7	; 0x07
 7f0:	88 2f       	mov	r24, r24
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	91 05       	cpc	r25, r1
 7f8:	19 f0       	breq	.+6      	; 0x800 <UART_Init+0x1fa>
 7fa:	02 97       	sbiw	r24, 0x02	; 2
 7fc:	59 f0       	breq	.+22     	; 0x814 <UART_Init+0x20e>
 7fe:	14 c0       	rjmp	.+40     	; 0x828 <UART_Init+0x222>
 800:	80 e4       	ldi	r24, 0x40	; 64
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	20 e4       	ldi	r18, 0x40	; 64
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	f9 01       	movw	r30, r18
 80a:	20 81       	ld	r18, Z
 80c:	27 7f       	andi	r18, 0xF7	; 247
 80e:	fc 01       	movw	r30, r24
 810:	20 83       	st	Z, r18
 812:	0c c0       	rjmp	.+24     	; 0x82c <UART_Init+0x226>
 814:	80 e4       	ldi	r24, 0x40	; 64
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	20 e4       	ldi	r18, 0x40	; 64
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	f9 01       	movw	r30, r18
 81e:	20 81       	ld	r18, Z
 820:	28 60       	ori	r18, 0x08	; 8
 822:	fc 01       	movw	r30, r24
 824:	20 83       	st	Z, r18
 826:	02 c0       	rjmp	.+4      	; 0x82c <UART_Init+0x226>
 828:	19 82       	std	Y+1, r1	; 0x01
 82a:	00 00       	nop
 82c:	8c 81       	ldd	r24, Y+4	; 0x04
 82e:	9d 81       	ldd	r25, Y+5	; 0x05
 830:	fc 01       	movw	r30, r24
 832:	80 85       	ldd	r24, Z+8	; 0x08
 834:	88 2f       	mov	r24, r24
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	71 f0       	breq	.+28     	; 0x858 <UART_Init+0x252>
 83c:	01 97       	sbiw	r24, 0x01	; 1
 83e:	b1 f4       	brne	.+44     	; 0x86c <__stack+0xd>
 840:	8a e2       	ldi	r24, 0x2A	; 42
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	2a e2       	ldi	r18, 0x2A	; 42
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	f9 01       	movw	r30, r18
 84a:	20 81       	ld	r18, Z
 84c:	20 68       	ori	r18, 0x80	; 128
 84e:	fc 01       	movw	r30, r24
 850:	20 83       	st	Z, r18
 852:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <Interrupts_On>
 856:	0c c0       	rjmp	.+24     	; 0x870 <__stack+0x11>
 858:	8a e2       	ldi	r24, 0x2A	; 42
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	2a e2       	ldi	r18, 0x2A	; 42
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	f9 01       	movw	r30, r18
 862:	20 81       	ld	r18, Z
 864:	2f 77       	andi	r18, 0x7F	; 127
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
 86a:	02 c0       	rjmp	.+4      	; 0x870 <__stack+0x11>
 86c:	19 82       	std	Y+1, r1	; 0x01
 86e:	00 00       	nop
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	0f 90       	pop	r0
 874:	0f 90       	pop	r0
 876:	0f 90       	pop	r0
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	ff 90       	pop	r15
 886:	ef 90       	pop	r14
 888:	08 95       	ret

0000088a <UART_Receive>:
 * Description: this function is to Receive a data(8 bits) by the UART 
 * @param data the symbol to be sent
 * @return the Received data
 */
uint8 UART_Receive()
{
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	cd b7       	in	r28, 0x3d	; 61
 890:	de b7       	in	r29, 0x3e	; 62
	/* Wait for Receive complete Flag */
	while ( GET_BIT(UART_UCSRA,RXC) == FALSE );
 892:	00 00       	nop
 894:	8b e2       	ldi	r24, 0x2B	; 43
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	fc 01       	movw	r30, r24
 89a:	80 81       	ld	r24, Z
 89c:	88 1f       	adc	r24, r24
 89e:	88 27       	eor	r24, r24
 8a0:	88 1f       	adc	r24, r24
 8a2:	88 2f       	mov	r24, r24
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	81 70       	andi	r24, 0x01	; 1
 8a8:	99 27       	eor	r25, r25
 8aa:	89 2b       	or	r24, r25
 8ac:	99 f3       	breq	.-26     	; 0x894 <UART_Receive+0xa>
	//while ( !(UCSRA & (1<<RXC) ) );
	return UART_UDR;
 8ae:	8c e2       	ldi	r24, 0x2C	; 44
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	fc 01       	movw	r30, r24
 8b4:	80 81       	ld	r24, Z
}
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	08 95       	ret

000008bc <__udivmodsi4>:
 8bc:	a1 e2       	ldi	r26, 0x21	; 33
 8be:	1a 2e       	mov	r1, r26
 8c0:	aa 1b       	sub	r26, r26
 8c2:	bb 1b       	sub	r27, r27
 8c4:	fd 01       	movw	r30, r26
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__udivmodsi4_ep>

000008c8 <__udivmodsi4_loop>:
 8c8:	aa 1f       	adc	r26, r26
 8ca:	bb 1f       	adc	r27, r27
 8cc:	ee 1f       	adc	r30, r30
 8ce:	ff 1f       	adc	r31, r31
 8d0:	a2 17       	cp	r26, r18
 8d2:	b3 07       	cpc	r27, r19
 8d4:	e4 07       	cpc	r30, r20
 8d6:	f5 07       	cpc	r31, r21
 8d8:	20 f0       	brcs	.+8      	; 0x8e2 <__udivmodsi4_ep>
 8da:	a2 1b       	sub	r26, r18
 8dc:	b3 0b       	sbc	r27, r19
 8de:	e4 0b       	sbc	r30, r20
 8e0:	f5 0b       	sbc	r31, r21

000008e2 <__udivmodsi4_ep>:
 8e2:	66 1f       	adc	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	99 1f       	adc	r25, r25
 8ea:	1a 94       	dec	r1
 8ec:	69 f7       	brne	.-38     	; 0x8c8 <__udivmodsi4_loop>
 8ee:	60 95       	com	r22
 8f0:	70 95       	com	r23
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	9b 01       	movw	r18, r22
 8f8:	ac 01       	movw	r20, r24
 8fa:	bd 01       	movw	r22, r26
 8fc:	cf 01       	movw	r24, r30
 8fe:	08 95       	ret

00000900 <_exit>:
 900:	f8 94       	cli

00000902 <__stop_program>:
 902:	ff cf       	rjmp	.-2      	; 0x902 <__stop_program>
