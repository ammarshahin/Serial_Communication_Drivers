
SerialCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000079c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001061  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099e  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010ab  00000000  00000000  00002413  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000040c  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f7  00000000  00000000  000038cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007eb  00000000  00000000  00003fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000047ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  7a:	0c 94 cc 03 	jmp	0x798	; 0x798 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pushButton_Init>:
/**
 * Description: Function to Initiate the Push Button.
 * @param push_Button the number of the pushButton [pushButton0,pushButton1]
 */
void pushButton_Init(pushButton push_Button)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
	switch(push_Button)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	88 2f       	mov	r24, r24
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	84 30       	cpi	r24, 0x04	; 4
  96:	91 05       	cpc	r25, r1
  98:	49 f0       	breq	.+18     	; 0xac <pushButton_Init+0x2a>
  9a:	40 97       	sbiw	r24, 0x10	; 16
  9c:	09 f0       	breq	.+2      	; 0xa0 <pushButton_Init+0x1e>
			break;
		case pushButton1 :
			Gpio_PinDirection(pushButton1_PORT,pushButton1_PIN,SET_IN);
			break;
	}
}
  9e:	0c c0       	rjmp	.+24     	; 0xb8 <pushButton_Init+0x36>
void pushButton_Init(pushButton push_Button)
{
	switch(push_Button)
	{
		case pushButton0 :
			Gpio_PinDirection(pushButton0_PORT,pushButton0_PIN,SET_IN);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	64 e0       	ldi	r22, 0x04	; 4
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 0d 01 	call	0x21a	; 0x21a <Gpio_PinDirection>
			break;
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <pushButton_Init+0x36>
		case pushButton1 :
			Gpio_PinDirection(pushButton1_PORT,pushButton1_PIN,SET_IN);
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 0d 01 	call	0x21a	; 0x21a <Gpio_PinDirection>
			break;
  b6:	00 00       	nop
	}
}
  b8:	00 00       	nop
  ba:	0f 90       	pop	r0
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <pushButton_Get_Status>:
 * Description: Function to get the status of the Push button(Value).
 * @param push_Button the number of the push button [pushButton0,pushButton1]
 * @return the value(state) of the push button
 */
uint8 pushButton_Get_Status(pushButton push_Button)
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <pushButton_Get_Status+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <pushButton_Get_Status+0x8>
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	8c 83       	std	Y+4, r24	; 0x04
	sint8 result0 = NO_CHANGE,result1,result2;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	89 83       	std	Y+1, r24	; 0x01
	switch(push_Button)
  d4:	8c 81       	ldd	r24, Y+4	; 0x04
  d6:	88 2f       	mov	r24, r24
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	91 05       	cpc	r25, r1
  de:	e1 f0       	breq	.+56     	; 0x118 <pushButton_Get_Status+0x56>
  e0:	40 97       	sbiw	r24, 0x10	; 16
  e2:	a1 f5       	brne	.+104    	; 0x14c <pushButton_Get_Status+0x8a>
	{
		case pushButton0 :
			result1 = Gpio_PinRead(pushButton0_PORT,pushButton0_PIN);
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 b9 01 	call	0x372	; 0x372 <Gpio_PinRead>
  ec:	8a 83       	std	Y+2, r24	; 0x02
			SwDelay_ms(10);
  ee:	6a e0       	ldi	r22, 0x0A	; 10
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 ae 00 	call	0x15c	; 0x15c <SwDelay_ms>
			result2 = Gpio_PinRead(pushButton0_PORT,pushButton0_PIN);
  fa:	64 e0       	ldi	r22, 0x04	; 4
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 b9 01 	call	0x372	; 0x372 <Gpio_PinRead>
 102:	8b 83       	std	Y+3, r24	; 0x03
			if(result1 == result2)
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	98 17       	cp	r25, r24
 10a:	19 f4       	brne	.+6      	; 0x112 <pushButton_Get_Status+0x50>
			{
				result0 = result1; 
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
			}else
			{
				result0 = NO_CHANGE;
			}
			break;
 110:	1d c0       	rjmp	.+58     	; 0x14c <pushButton_Get_Status+0x8a>
			if(result1 == result2)
			{
				result0 = result1; 
			}else
			{
				result0 = NO_CHANGE;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 116:	1a c0       	rjmp	.+52     	; 0x14c <pushButton_Get_Status+0x8a>
		case pushButton1 :
			result1 = Gpio_PinRead(pushButton1_PORT,pushButton1_PIN);
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 b9 01 	call	0x372	; 0x372 <Gpio_PinRead>
 120:	8a 83       	std	Y+2, r24	; 0x02
			SwDelay_ms(10);
 122:	6a e0       	ldi	r22, 0x0A	; 10
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 ae 00 	call	0x15c	; 0x15c <SwDelay_ms>
			result2 = Gpio_PinRead(pushButton1_PORT,pushButton1_PIN);
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 b9 01 	call	0x372	; 0x372 <Gpio_PinRead>
 136:	8b 83       	std	Y+3, r24	; 0x03
			if(result1 == result2)
 138:	9a 81       	ldd	r25, Y+2	; 0x02
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	98 17       	cp	r25, r24
 13e:	19 f4       	brne	.+6      	; 0x146 <pushButton_Get_Status+0x84>
			{
				result0 = result1;
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	89 83       	std	Y+1, r24	; 0x01
			}else
			{
				result0 = NO_CHANGE;
			}
			break;
 144:	02 c0       	rjmp	.+4      	; 0x14a <pushButton_Get_Status+0x88>
			if(result1 == result2)
			{
				result0 = result1;
			}else
			{
				result0 = NO_CHANGE;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 14a:	00 00       	nop
	}
	return result0;
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <SwDelay_ms>:
/**
 * Description: Function to make a software Delay in the Melli seconds 
 * @param NoOfMilleSeconds the number of  Melli seconds to delay
 */
void SwDelay_ms(uint32 NoOfMilleSeconds)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	28 97       	sbiw	r28, 0x08	; 8
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	6d 83       	std	Y+5, r22	; 0x05
 172:	7e 83       	std	Y+6, r23	; 0x06
 174:	8f 83       	std	Y+7, r24	; 0x07
 176:	98 87       	std	Y+8, r25	; 0x08
	sint32 counter;
	counter = NoOfMilleSeconds * (F_CPU / SECONDS_TO_MILLISECONSD_FACTOR);
 178:	2d 81       	ldd	r18, Y+5	; 0x05
 17a:	3e 81       	ldd	r19, Y+6	; 0x06
 17c:	4f 81       	ldd	r20, Y+7	; 0x07
 17e:	58 85       	ldd	r21, Y+8	; 0x08
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	9e e3       	ldi	r25, 0x3E	; 62
 184:	dc 01       	movw	r26, r24
 186:	0e 94 b2 03 	call	0x764	; 0x764 <__muluhisi3>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	89 83       	std	Y+1, r24	; 0x01
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	ab 83       	std	Y+3, r26	; 0x03
 194:	bc 83       	std	Y+4, r27	; 0x04
	while(counter > FALSE)
 196:	0b c0       	rjmp	.+22     	; 0x1ae <SwDelay_ms+0x52>
	{
			counter =  counter - CYCLE_MELLI_DELAY_FACTOR;
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	ab 81       	ldd	r26, Y+3	; 0x03
 19e:	bc 81       	ldd	r27, Y+4	; 0x04
 1a0:	09 97       	sbiw	r24, 0x09	; 9
 1a2:	a1 09       	sbc	r26, r1
 1a4:	b1 09       	sbc	r27, r1
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	ab 83       	std	Y+3, r26	; 0x03
 1ac:	bc 83       	std	Y+4, r27	; 0x04
 */
void SwDelay_ms(uint32 NoOfMilleSeconds)
{
	sint32 counter;
	counter = NoOfMilleSeconds * (F_CPU / SECONDS_TO_MILLISECONSD_FACTOR);
	while(counter > FALSE)
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	9a 81       	ldd	r25, Y+2	; 0x02
 1b2:	ab 81       	ldd	r26, Y+3	; 0x03
 1b4:	bc 81       	ldd	r27, Y+4	; 0x04
 1b6:	18 16       	cp	r1, r24
 1b8:	19 06       	cpc	r1, r25
 1ba:	1a 06       	cpc	r1, r26
 1bc:	1b 06       	cpc	r1, r27
 1be:	64 f3       	brlt	.-40     	; 0x198 <SwDelay_ms+0x3c>
	{
			counter =  counter - CYCLE_MELLI_DELAY_FACTOR;
	}
}
 1c0:	00 00       	nop
 1c2:	28 96       	adiw	r28, 0x08	; 8
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:

/************************************************************************/
/*                     Functions Implementations                        */
/************************************************************************/
int main(void)
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	1f 92       	push	r1
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
	char i = 0;
 1de:	19 82       	std	Y+1, r1	; 0x01
	UART_Init(&UART_Cfg_s);
 1e0:	80 e6       	ldi	r24, 0x60	; 96
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 30 02 	call	0x460	; 0x460 <UART_Init>
	pushButton_Init(pushButton0);
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <pushButton_Init>
	while (TRUE)
	{
		if(pushButton_Get_Status(pushButton0))
 1ee:	80 e1       	ldi	r24, 0x10	; 16
 1f0:	0e 94 61 00 	call	0xc2	; 0xc2 <pushButton_Get_Status>
 1f4:	88 23       	and	r24, r24
 1f6:	d9 f3       	breq	.-10     	; 0x1ee <main+0x1a>
		{
			if (i > 9)
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	08 f0       	brcs	.+2      	; 0x200 <main+0x2c>
			{
				i = 0;
 1fe:	19 82       	std	Y+1, r1	; 0x01
			}
			UART_Send(i);
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	0e 94 72 03 	call	0x6e4	; 0x6e4 <UART_Send>
			i++;
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	89 83       	std	Y+1, r24	; 0x01
			SwDelay_ms(100);
 20c:	64 e6       	ldi	r22, 0x64	; 100
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 ae 00 	call	0x15c	; 0x15c <SwDelay_ms>
		}
	}
 218:	ea cf       	rjmp	.-44     	; 0x1ee <main+0x1a>

0000021a <Gpio_PinDirection>:
		break;
		case MYPORTD :
		PORT_D ^= (pins);
		break;
	}
}
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	00 d0       	rcall	.+0      	; 0x220 <Gpio_PinDirection+0x6>
 220:	1f 92       	push	r1
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	6a 83       	std	Y+2, r22	; 0x02
 22a:	4b 83       	std	Y+3, r20	; 0x03
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	88 2f       	mov	r24, r24
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 05       	cpc	r25, r1
 236:	81 f1       	breq	.+96     	; 0x298 <Gpio_PinDirection+0x7e>
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	91 05       	cpc	r25, r1
 23c:	1c f4       	brge	.+6      	; 0x244 <Gpio_PinDirection+0x2a>
 23e:	89 2b       	or	r24, r25
 240:	49 f0       	breq	.+18     	; 0x254 <Gpio_PinDirection+0x3a>
 242:	90 c0       	rjmp	.+288    	; 0x364 <Gpio_PinDirection+0x14a>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	91 05       	cpc	r25, r1
 248:	09 f4       	brne	.+2      	; 0x24c <Gpio_PinDirection+0x32>
 24a:	48 c0       	rjmp	.+144    	; 0x2dc <Gpio_PinDirection+0xc2>
 24c:	03 97       	sbiw	r24, 0x03	; 3
 24e:	09 f4       	brne	.+2      	; 0x252 <Gpio_PinDirection+0x38>
 250:	67 c0       	rjmp	.+206    	; 0x320 <Gpio_PinDirection+0x106>
 252:	88 c0       	rjmp	.+272    	; 0x364 <Gpio_PinDirection+0x14a>
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	21 f0       	breq	.+8      	; 0x266 <Gpio_PinDirection+0x4c>
 25e:	8f 3f       	cpi	r24, 0xFF	; 255
 260:	91 05       	cpc	r25, r1
 262:	71 f0       	breq	.+28     	; 0x280 <Gpio_PinDirection+0x66>
 264:	7f c0       	rjmp	.+254    	; 0x364 <Gpio_PinDirection+0x14a>
 266:	8a e3       	ldi	r24, 0x3A	; 58
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	2a e3       	ldi	r18, 0x3A	; 58
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	32 2f       	mov	r19, r18
 274:	2a 81       	ldd	r18, Y+2	; 0x02
 276:	20 95       	com	r18
 278:	23 23       	and	r18, r19
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
 27e:	0b c0       	rjmp	.+22     	; 0x296 <Gpio_PinDirection+0x7c>
 280:	8a e3       	ldi	r24, 0x3A	; 58
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	2a e3       	ldi	r18, 0x3A	; 58
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	f9 01       	movw	r30, r18
 28a:	30 81       	ld	r19, Z
 28c:	2a 81       	ldd	r18, Y+2	; 0x02
 28e:	23 2b       	or	r18, r19
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
 294:	00 00       	nop
 296:	66 c0       	rjmp	.+204    	; 0x364 <Gpio_PinDirection+0x14a>
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	88 2f       	mov	r24, r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	21 f0       	breq	.+8      	; 0x2aa <Gpio_PinDirection+0x90>
 2a2:	8f 3f       	cpi	r24, 0xFF	; 255
 2a4:	91 05       	cpc	r25, r1
 2a6:	71 f0       	breq	.+28     	; 0x2c4 <Gpio_PinDirection+0xaa>
 2a8:	5d c0       	rjmp	.+186    	; 0x364 <Gpio_PinDirection+0x14a>
 2aa:	87 e3       	ldi	r24, 0x37	; 55
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	27 e3       	ldi	r18, 0x37	; 55
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	20 81       	ld	r18, Z
 2b6:	32 2f       	mov	r19, r18
 2b8:	2a 81       	ldd	r18, Y+2	; 0x02
 2ba:	20 95       	com	r18
 2bc:	23 23       	and	r18, r19
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	0b c0       	rjmp	.+22     	; 0x2da <Gpio_PinDirection+0xc0>
 2c4:	87 e3       	ldi	r24, 0x37	; 55
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	27 e3       	ldi	r18, 0x37	; 55
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	f9 01       	movw	r30, r18
 2ce:	30 81       	ld	r19, Z
 2d0:	2a 81       	ldd	r18, Y+2	; 0x02
 2d2:	23 2b       	or	r18, r19
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
 2d8:	00 00       	nop
 2da:	44 c0       	rjmp	.+136    	; 0x364 <Gpio_PinDirection+0x14a>
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	88 2f       	mov	r24, r24
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	21 f0       	breq	.+8      	; 0x2ee <Gpio_PinDirection+0xd4>
 2e6:	8f 3f       	cpi	r24, 0xFF	; 255
 2e8:	91 05       	cpc	r25, r1
 2ea:	71 f0       	breq	.+28     	; 0x308 <Gpio_PinDirection+0xee>
 2ec:	3b c0       	rjmp	.+118    	; 0x364 <Gpio_PinDirection+0x14a>
 2ee:	84 e3       	ldi	r24, 0x34	; 52
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	24 e3       	ldi	r18, 0x34	; 52
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	20 81       	ld	r18, Z
 2fa:	32 2f       	mov	r19, r18
 2fc:	2a 81       	ldd	r18, Y+2	; 0x02
 2fe:	20 95       	com	r18
 300:	23 23       	and	r18, r19
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
 306:	0b c0       	rjmp	.+22     	; 0x31e <Gpio_PinDirection+0x104>
 308:	84 e3       	ldi	r24, 0x34	; 52
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	24 e3       	ldi	r18, 0x34	; 52
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	30 81       	ld	r19, Z
 314:	2a 81       	ldd	r18, Y+2	; 0x02
 316:	23 2b       	or	r18, r19
 318:	fc 01       	movw	r30, r24
 31a:	20 83       	st	Z, r18
 31c:	00 00       	nop
 31e:	22 c0       	rjmp	.+68     	; 0x364 <Gpio_PinDirection+0x14a>
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	21 f0       	breq	.+8      	; 0x332 <Gpio_PinDirection+0x118>
 32a:	8f 3f       	cpi	r24, 0xFF	; 255
 32c:	91 05       	cpc	r25, r1
 32e:	71 f0       	breq	.+28     	; 0x34c <Gpio_PinDirection+0x132>
 330:	18 c0       	rjmp	.+48     	; 0x362 <Gpio_PinDirection+0x148>
 332:	81 e3       	ldi	r24, 0x31	; 49
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	21 e3       	ldi	r18, 0x31	; 49
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	f9 01       	movw	r30, r18
 33c:	20 81       	ld	r18, Z
 33e:	32 2f       	mov	r19, r18
 340:	2a 81       	ldd	r18, Y+2	; 0x02
 342:	20 95       	com	r18
 344:	23 23       	and	r18, r19
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
 34a:	0b c0       	rjmp	.+22     	; 0x362 <Gpio_PinDirection+0x148>
 34c:	81 e3       	ldi	r24, 0x31	; 49
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	21 e3       	ldi	r18, 0x31	; 49
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	f9 01       	movw	r30, r18
 356:	30 81       	ld	r19, Z
 358:	2a 81       	ldd	r18, Y+2	; 0x02
 35a:	23 2b       	or	r18, r19
 35c:	fc 01       	movw	r30, r24
 35e:	20 83       	st	Z, r18
 360:	00 00       	nop
 362:	00 00       	nop
 364:	00 00       	nop
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <Gpio_PinRead>:
 * @param port : the port that includes the pin {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param pins : the pin Number {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7}
 * Return : the value Read by the function 
 */
uint8 Gpio_PinRead(uint8 port, uint8 pin)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	00 d0       	rcall	.+0      	; 0x378 <Gpio_PinRead+0x6>
 378:	1f 92       	push	r1
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	8a 83       	std	Y+2, r24	; 0x02
 380:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result = 0;
 382:	19 82       	std	Y+1, r1	; 0x01
	switch(port)
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	91 05       	cpc	r25, r1
 38e:	e9 f0       	breq	.+58     	; 0x3ca <Gpio_PinRead+0x58>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	91 05       	cpc	r25, r1
 394:	1c f4       	brge	.+6      	; 0x39c <Gpio_PinRead+0x2a>
 396:	89 2b       	or	r24, r25
 398:	39 f0       	breq	.+14     	; 0x3a8 <Gpio_PinRead+0x36>
 39a:	4a c0       	rjmp	.+148    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 39c:	82 30       	cpi	r24, 0x02	; 2
 39e:	91 05       	cpc	r25, r1
 3a0:	29 f1       	breq	.+74     	; 0x3ec <Gpio_PinRead+0x7a>
 3a2:	03 97       	sbiw	r24, 0x03	; 3
 3a4:	a1 f1       	breq	.+104    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3a6:	44 c0       	rjmp	.+136    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		case MYPORTA :
		result = ((PIN_A >> pin) & 0x01);
 3a8:	89 e3       	ldi	r24, 0x39	; 57
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	2b 81       	ldd	r18, Y+3	; 0x03
 3b6:	22 2f       	mov	r18, r18
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <Gpio_PinRead+0x4e>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	2a 95       	dec	r18
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <Gpio_PinRead+0x4a>
 3c4:	81 70       	andi	r24, 0x01	; 1
 3c6:	89 83       	std	Y+1, r24	; 0x01
		break;
 3c8:	33 c0       	rjmp	.+102    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		case MYPORTB :
		result = ((PIN_B >> pin) & 0x01);
 3ca:	86 e3       	ldi	r24, 0x36	; 54
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	80 81       	ld	r24, Z
 3d2:	88 2f       	mov	r24, r24
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	2b 81       	ldd	r18, Y+3	; 0x03
 3d8:	22 2f       	mov	r18, r18
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <Gpio_PinRead+0x70>
 3de:	95 95       	asr	r25
 3e0:	87 95       	ror	r24
 3e2:	2a 95       	dec	r18
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <Gpio_PinRead+0x6c>
 3e6:	81 70       	andi	r24, 0x01	; 1
 3e8:	89 83       	std	Y+1, r24	; 0x01
		break;
 3ea:	22 c0       	rjmp	.+68     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		case MYPORTC :
		result = ((PIN_C >> pin) & 0x01);
 3ec:	83 e3       	ldi	r24, 0x33	; 51
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	80 81       	ld	r24, Z
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	2b 81       	ldd	r18, Y+3	; 0x03
 3fa:	22 2f       	mov	r18, r18
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 400:	95 95       	asr	r25
 402:	87 95       	ror	r24
 404:	2a 95       	dec	r18
 406:	e2 f7       	brpl	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	81 70       	andi	r24, 0x01	; 1
 40a:	89 83       	std	Y+1, r24	; 0x01
		break;
 40c:	11 c0       	rjmp	.+34     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		case MYPORTD :
		result = ((PIN_D >> pin) & 0x01);
 40e:	80 e3       	ldi	r24, 0x30	; 48
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	fc 01       	movw	r30, r24
 414:	80 81       	ld	r24, Z
 416:	88 2f       	mov	r24, r24
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	2b 81       	ldd	r18, Y+3	; 0x03
 41c:	22 2f       	mov	r18, r18
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	95 95       	asr	r25
 424:	87 95       	ror	r24
 426:	2a 95       	dec	r18
 428:	e2 f7       	brpl	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42a:	81 70       	andi	r24, 0x01	; 1
 42c:	89 83       	std	Y+1, r24	; 0x01
		break;
 42e:	00 00       	nop
	}
	return result;
 430:	89 81       	ldd	r24, Y+1	; 0x01
}
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <Interrupts_On>:
 * Description : This function is used to turn On the global interrupt mask
 * Return : the function Returns nothing
 */

void Interrupts_On(void)
{     
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
 446:	8f e5       	ldi	r24, 0x5F	; 95
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	2f e5       	ldi	r18, 0x5F	; 95
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	f9 01       	movw	r30, r18
 450:	20 81       	ld	r18, Z
 452:	20 68       	ori	r18, 0x80	; 128
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18
}
 458:	00 00       	nop
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <UART_Init>:
 * 								6- the Enable Interrupt_Receive state
 *                              7- the MCU Frequency
 * @return the Status of the initialization [OK Or NOT_OK] 
 */
uint8 UART_Init(UART_CFG_S* cfg_s)
{
 460:	ef 92       	push	r14
 462:	ff 92       	push	r15
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <UART_Init+0xe>
 46e:	00 d0       	rcall	.+0      	; 0x470 <UART_Init+0x10>
 470:	1f 92       	push	r1
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	9d 83       	std	Y+5, r25	; 0x05
 478:	8c 83       	std	Y+4, r24	; 0x04
	uint8 cfg_State = OK;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Setting the Baud rate */
	uint16 BaudRate = (cfg_s->MCU_Freq / (BAUDRATE_FACTOR_16 * cfg_s->BaudRate)) - BAUDRATE_FACTOR_1;
 47e:	8c 81       	ldd	r24, Y+4	; 0x04
 480:	9d 81       	ldd	r25, Y+5	; 0x05
 482:	fc 01       	movw	r30, r24
 484:	21 85       	ldd	r18, Z+9	; 0x09
 486:	32 85       	ldd	r19, Z+10	; 0x0a
 488:	43 85       	ldd	r20, Z+11	; 0x0b
 48a:	54 85       	ldd	r21, Z+12	; 0x0c
 48c:	8c 81       	ldd	r24, Y+4	; 0x04
 48e:	9d 81       	ldd	r25, Y+5	; 0x05
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	a2 81       	ldd	r26, Z+2	; 0x02
 498:	b3 81       	ldd	r27, Z+3	; 0x03
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	aa 1f       	adc	r26, r26
 4a0:	bb 1f       	adc	r27, r27
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	aa 1f       	adc	r26, r26
 4a8:	bb 1f       	adc	r27, r27
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	aa 1f       	adc	r26, r26
 4b0:	bb 1f       	adc	r27, r27
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	aa 1f       	adc	r26, r26
 4b8:	bb 1f       	adc	r27, r27
 4ba:	7c 01       	movw	r14, r24
 4bc:	8d 01       	movw	r16, r26
 4be:	ca 01       	movw	r24, r20
 4c0:	b9 01       	movw	r22, r18
 4c2:	a8 01       	movw	r20, r16
 4c4:	97 01       	movw	r18, r14
 4c6:	0e 94 90 03 	call	0x720	; 0x720 <__udivmodsi4>
 4ca:	da 01       	movw	r26, r20
 4cc:	c9 01       	movw	r24, r18
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	9b 83       	std	Y+3, r25	; 0x03
 4d2:	8a 83       	std	Y+2, r24	; 0x02
	UART_UBRRL = (uint8) BaudRate;
 4d4:	89 e2       	ldi	r24, 0x29	; 41
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	2a 81       	ldd	r18, Y+2	; 0x02
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
	UART_UBRRH |= (uint8) (BaudRate >> BAUDRATE_FACTOR_8);
 4de:	80 e4       	ldi	r24, 0x40	; 64
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	20 e4       	ldi	r18, 0x40	; 64
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	f9 01       	movw	r30, r18
 4e8:	20 81       	ld	r18, Z
 4ea:	42 2f       	mov	r20, r18
 4ec:	2a 81       	ldd	r18, Y+2	; 0x02
 4ee:	3b 81       	ldd	r19, Y+3	; 0x03
 4f0:	23 2f       	mov	r18, r19
 4f2:	33 27       	eor	r19, r19
 4f4:	24 2b       	or	r18, r20
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
	
	
	/* Setting the character size to be 8bit*/
	SET_BIT(UART_UCSRC,UCSZ0);
 4fa:	80 e4       	ldi	r24, 0x40	; 64
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	20 e4       	ldi	r18, 0x40	; 64
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	f9 01       	movw	r30, r18
 504:	20 81       	ld	r18, Z
 506:	22 60       	ori	r18, 0x02	; 2
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
	SET_BIT(UART_UCSRC,UCSZ1);
 50c:	80 e4       	ldi	r24, 0x40	; 64
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	20 e4       	ldi	r18, 0x40	; 64
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	f9 01       	movw	r30, r18
 516:	20 81       	ld	r18, Z
 518:	24 60       	ori	r18, 0x04	; 4
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
	CLR_BIT(UART_UCSRB,UCSZ2);
 51e:	8a e2       	ldi	r24, 0x2A	; 42
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	2a e2       	ldi	r18, 0x2A	; 42
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f9 01       	movw	r30, r18
 528:	20 81       	ld	r18, Z
 52a:	2b 7f       	andi	r18, 0xFB	; 251
 52c:	fc 01       	movw	r30, r24
 52e:	20 83       	st	Z, r18
	
	/* Setting the Receiver State */
	switch(cfg_s->Enable_Receiver)
 530:	8c 81       	ldd	r24, Y+4	; 0x04
 532:	9d 81       	ldd	r25, Y+5	; 0x05
 534:	fc 01       	movw	r30, r24
 536:	84 81       	ldd	r24, Z+4	; 0x04
 538:	88 2f       	mov	r24, r24
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	61 f0       	breq	.+24     	; 0x558 <UART_Init+0xf8>
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	a1 f4       	brne	.+40     	; 0x56c <UART_Init+0x10c>
	{
		case ENABLED: 
			SET_BIT(UART_UCSRB,RXEN);
 544:	8a e2       	ldi	r24, 0x2A	; 42
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	2a e2       	ldi	r18, 0x2A	; 42
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	20 61       	ori	r18, 0x10	; 16
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
			break;
 556:	0c c0       	rjmp	.+24     	; 0x570 <UART_Init+0x110>
		case DISABLED:
			CLR_BIT(UART_UCSRB,RXEN);
 558:	8a e2       	ldi	r24, 0x2A	; 42
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	2a e2       	ldi	r18, 0x2A	; 42
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	20 81       	ld	r18, Z
 564:	2f 7e       	andi	r18, 0xEF	; 239
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
			break;
 56a:	02 c0       	rjmp	.+4      	; 0x570 <UART_Init+0x110>
		default:
			cfg_State = NOT_OK;
 56c:	19 82       	std	Y+1, r1	; 0x01
			break;
 56e:	00 00       	nop
	}
	
	/* Setting the Transmitter State */
	switch(cfg_s->Enable_Transmitter)
 570:	8c 81       	ldd	r24, Y+4	; 0x04
 572:	9d 81       	ldd	r25, Y+5	; 0x05
 574:	fc 01       	movw	r30, r24
 576:	85 81       	ldd	r24, Z+5	; 0x05
 578:	88 2f       	mov	r24, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	61 f0       	breq	.+24     	; 0x598 <UART_Init+0x138>
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	a1 f4       	brne	.+40     	; 0x5ac <UART_Init+0x14c>
	{
		case ENABLED:
		SET_BIT(UART_UCSRB,TXEN);
 584:	8a e2       	ldi	r24, 0x2A	; 42
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	2a e2       	ldi	r18, 0x2A	; 42
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	f9 01       	movw	r30, r18
 58e:	20 81       	ld	r18, Z
 590:	28 60       	ori	r18, 0x08	; 8
 592:	fc 01       	movw	r30, r24
 594:	20 83       	st	Z, r18
		break;
 596:	0c c0       	rjmp	.+24     	; 0x5b0 <UART_Init+0x150>
		case DISABLED:
		CLR_BIT(UART_UCSRB,TXEN);
 598:	8a e2       	ldi	r24, 0x2A	; 42
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	2a e2       	ldi	r18, 0x2A	; 42
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	20 81       	ld	r18, Z
 5a4:	27 7f       	andi	r18, 0xF7	; 247
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
		break;
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <UART_Init+0x150>
		default:
		cfg_State = NOT_OK;
 5ac:	19 82       	std	Y+1, r1	; 0x01
		break;
 5ae:	00 00       	nop
	}
	
	/* Setting the Parity State */
	switch(cfg_s->Enable_Parity)
 5b0:	8c 81       	ldd	r24, Y+4	; 0x04
 5b2:	9d 81       	ldd	r25, Y+5	; 0x05
 5b4:	fc 01       	movw	r30, r24
 5b6:	86 81       	ldd	r24, Z+6	; 0x06
 5b8:	88 2f       	mov	r24, r24
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	91 05       	cpc	r25, r1
 5c0:	c1 f0       	breq	.+48     	; 0x5f2 <UART_Init+0x192>
 5c2:	82 30       	cpi	r24, 0x02	; 2
 5c4:	91 05       	cpc	r25, r1
 5c6:	41 f1       	breq	.+80     	; 0x618 <UART_Init+0x1b8>
 5c8:	89 2b       	or	r24, r25
 5ca:	c9 f5       	brne	.+114    	; 0x63e <UART_Init+0x1de>
	{
		case DISABLED:
		CLR_BIT(UART_UCSRC,UPM0);
 5cc:	80 e4       	ldi	r24, 0x40	; 64
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	20 e4       	ldi	r18, 0x40	; 64
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	f9 01       	movw	r30, r18
 5d6:	20 81       	ld	r18, Z
 5d8:	2f 7e       	andi	r18, 0xEF	; 239
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
		CLR_BIT(UART_UCSRC,UPM1);
 5de:	80 e4       	ldi	r24, 0x40	; 64
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	20 e4       	ldi	r18, 0x40	; 64
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	f9 01       	movw	r30, r18
 5e8:	20 81       	ld	r18, Z
 5ea:	2f 7d       	andi	r18, 0xDF	; 223
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 83       	st	Z, r18
		break;
 5f0:	28 c0       	rjmp	.+80     	; 0x642 <UART_Init+0x1e2>
		case ENABLED_EVEN:
		CLR_BIT(UART_UCSRC,UPM0);
 5f2:	80 e4       	ldi	r24, 0x40	; 64
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	20 e4       	ldi	r18, 0x40	; 64
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	f9 01       	movw	r30, r18
 5fc:	20 81       	ld	r18, Z
 5fe:	2f 7e       	andi	r18, 0xEF	; 239
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
		SET_BIT(UART_UCSRC,UPM1);
 604:	80 e4       	ldi	r24, 0x40	; 64
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	20 e4       	ldi	r18, 0x40	; 64
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	f9 01       	movw	r30, r18
 60e:	20 81       	ld	r18, Z
 610:	20 62       	ori	r18, 0x20	; 32
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
		break;
 616:	15 c0       	rjmp	.+42     	; 0x642 <UART_Init+0x1e2>
		case ENABLED_ODD:
		SET_BIT(UART_UCSRC,UPM0);
 618:	80 e4       	ldi	r24, 0x40	; 64
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	20 e4       	ldi	r18, 0x40	; 64
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	f9 01       	movw	r30, r18
 622:	20 81       	ld	r18, Z
 624:	20 61       	ori	r18, 0x10	; 16
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
		SET_BIT(UART_UCSRC,UPM1);
 62a:	80 e4       	ldi	r24, 0x40	; 64
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	20 e4       	ldi	r18, 0x40	; 64
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	f9 01       	movw	r30, r18
 634:	20 81       	ld	r18, Z
 636:	20 62       	ori	r18, 0x20	; 32
 638:	fc 01       	movw	r30, r24
 63a:	20 83       	st	Z, r18
		break;
 63c:	02 c0       	rjmp	.+4      	; 0x642 <UART_Init+0x1e2>
		default:
		cfg_State = NOT_OK;
 63e:	19 82       	std	Y+1, r1	; 0x01
		break;
 640:	00 00       	nop
	}
	
	/* Setting the StopBits State */
	switch(cfg_s->StopBits)
 642:	8c 81       	ldd	r24, Y+4	; 0x04
 644:	9d 81       	ldd	r25, Y+5	; 0x05
 646:	fc 01       	movw	r30, r24
 648:	87 81       	ldd	r24, Z+7	; 0x07
 64a:	88 2f       	mov	r24, r24
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	91 05       	cpc	r25, r1
 652:	19 f0       	breq	.+6      	; 0x65a <UART_Init+0x1fa>
 654:	02 97       	sbiw	r24, 0x02	; 2
 656:	59 f0       	breq	.+22     	; 0x66e <UART_Init+0x20e>
 658:	14 c0       	rjmp	.+40     	; 0x682 <UART_Init+0x222>
	{
		case SINGLE_STOPBIT:
		CLR_BIT(UART_UCSRC,USBS);
 65a:	80 e4       	ldi	r24, 0x40	; 64
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	20 e4       	ldi	r18, 0x40	; 64
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	f9 01       	movw	r30, r18
 664:	20 81       	ld	r18, Z
 666:	27 7f       	andi	r18, 0xF7	; 247
 668:	fc 01       	movw	r30, r24
 66a:	20 83       	st	Z, r18
		break;
 66c:	0c c0       	rjmp	.+24     	; 0x686 <UART_Init+0x226>
		case DOUBLE_STOPBIT:
		SET_BIT(UART_UCSRC,USBS);
 66e:	80 e4       	ldi	r24, 0x40	; 64
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	20 e4       	ldi	r18, 0x40	; 64
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	f9 01       	movw	r30, r18
 678:	20 81       	ld	r18, Z
 67a:	28 60       	ori	r18, 0x08	; 8
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
		break;
 680:	02 c0       	rjmp	.+4      	; 0x686 <UART_Init+0x226>
		default:
		cfg_State = NOT_OK;
 682:	19 82       	std	Y+1, r1	; 0x01
		break;
 684:	00 00       	nop
	}
	
	/* Setting the Interrupt_Receive State */
	switch(cfg_s->Interrupt_Receive)
 686:	8c 81       	ldd	r24, Y+4	; 0x04
 688:	9d 81       	ldd	r25, Y+5	; 0x05
 68a:	fc 01       	movw	r30, r24
 68c:	80 85       	ldd	r24, Z+8	; 0x08
 68e:	88 2f       	mov	r24, r24
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	00 97       	sbiw	r24, 0x00	; 0
 694:	71 f0       	breq	.+28     	; 0x6b2 <UART_Init+0x252>
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	b1 f4       	brne	.+44     	; 0x6c6 <UART_Init+0x266>
	{
		case ENABLED:
		SET_BIT(UART_UCSRB,RXCIE);
 69a:	8a e2       	ldi	r24, 0x2A	; 42
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	2a e2       	ldi	r18, 0x2A	; 42
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	f9 01       	movw	r30, r18
 6a4:	20 81       	ld	r18, Z
 6a6:	20 68       	ori	r18, 0x80	; 128
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 83       	st	Z, r18
		Interrupts_On();
 6ac:	0e 94 1f 02 	call	0x43e	; 0x43e <Interrupts_On>
		break;
 6b0:	0c c0       	rjmp	.+24     	; 0x6ca <UART_Init+0x26a>
		case DISABLED:
		CLR_BIT(UART_UCSRB,RXCIE);
 6b2:	8a e2       	ldi	r24, 0x2A	; 42
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	2a e2       	ldi	r18, 0x2A	; 42
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	f9 01       	movw	r30, r18
 6bc:	20 81       	ld	r18, Z
 6be:	2f 77       	andi	r18, 0x7F	; 127
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
		break;
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <UART_Init+0x26a>
		default:
		cfg_State = NOT_OK;
 6c6:	19 82       	std	Y+1, r1	; 0x01
		break;
 6c8:	00 00       	nop
	}
	return cfg_State;
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	0f 91       	pop	r16
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	08 95       	ret

000006e4 <UART_Send>:
 * Description: this function is to send a data(8 bits) by the UART 
 * @param data the symbol to be sent
 * @return the Status of the function [OK Or NOT_OK] 
 */
uint8 UART_Send(uint8 data)
{
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	1f 92       	push	r1
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( GET_BIT(UART_UCSRA,UDRE) == FALSE );
 6f0:	00 00       	nop
 6f2:	8b e2       	ldi	r24, 0x2B	; 43
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	fc 01       	movw	r30, r24
 6f8:	80 81       	ld	r24, Z
 6fa:	82 95       	swap	r24
 6fc:	86 95       	lsr	r24
 6fe:	87 70       	andi	r24, 0x07	; 7
 700:	88 2f       	mov	r24, r24
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	81 70       	andi	r24, 0x01	; 1
 706:	99 27       	eor	r25, r25
 708:	89 2b       	or	r24, r25
 70a:	99 f3       	breq	.-26     	; 0x6f2 <UART_Send+0xe>
	//while ( !( UCSRA & (1<<UDRE)) );
	UART_UDR = data;
 70c:	8c e2       	ldi	r24, 0x2C	; 44
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	29 81       	ldd	r18, Y+1	; 0x01
 712:	fc 01       	movw	r30, r24
 714:	20 83       	st	Z, r18
	return OK;
 716:	81 e0       	ldi	r24, 0x01	; 1
}
 718:	0f 90       	pop	r0
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <__udivmodsi4>:
 720:	a1 e2       	ldi	r26, 0x21	; 33
 722:	1a 2e       	mov	r1, r26
 724:	aa 1b       	sub	r26, r26
 726:	bb 1b       	sub	r27, r27
 728:	fd 01       	movw	r30, r26
 72a:	0d c0       	rjmp	.+26     	; 0x746 <__udivmodsi4_ep>

0000072c <__udivmodsi4_loop>:
 72c:	aa 1f       	adc	r26, r26
 72e:	bb 1f       	adc	r27, r27
 730:	ee 1f       	adc	r30, r30
 732:	ff 1f       	adc	r31, r31
 734:	a2 17       	cp	r26, r18
 736:	b3 07       	cpc	r27, r19
 738:	e4 07       	cpc	r30, r20
 73a:	f5 07       	cpc	r31, r21
 73c:	20 f0       	brcs	.+8      	; 0x746 <__udivmodsi4_ep>
 73e:	a2 1b       	sub	r26, r18
 740:	b3 0b       	sbc	r27, r19
 742:	e4 0b       	sbc	r30, r20
 744:	f5 0b       	sbc	r31, r21

00000746 <__udivmodsi4_ep>:
 746:	66 1f       	adc	r22, r22
 748:	77 1f       	adc	r23, r23
 74a:	88 1f       	adc	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	1a 94       	dec	r1
 750:	69 f7       	brne	.-38     	; 0x72c <__udivmodsi4_loop>
 752:	60 95       	com	r22
 754:	70 95       	com	r23
 756:	80 95       	com	r24
 758:	90 95       	com	r25
 75a:	9b 01       	movw	r18, r22
 75c:	ac 01       	movw	r20, r24
 75e:	bd 01       	movw	r22, r26
 760:	cf 01       	movw	r24, r30
 762:	08 95       	ret

00000764 <__muluhisi3>:
 764:	0e 94 bd 03 	call	0x77a	; 0x77a <__umulhisi3>
 768:	a5 9f       	mul	r26, r21
 76a:	90 0d       	add	r25, r0
 76c:	b4 9f       	mul	r27, r20
 76e:	90 0d       	add	r25, r0
 770:	a4 9f       	mul	r26, r20
 772:	80 0d       	add	r24, r0
 774:	91 1d       	adc	r25, r1
 776:	11 24       	eor	r1, r1
 778:	08 95       	ret

0000077a <__umulhisi3>:
 77a:	a2 9f       	mul	r26, r18
 77c:	b0 01       	movw	r22, r0
 77e:	b3 9f       	mul	r27, r19
 780:	c0 01       	movw	r24, r0
 782:	a3 9f       	mul	r26, r19
 784:	70 0d       	add	r23, r0
 786:	81 1d       	adc	r24, r1
 788:	11 24       	eor	r1, r1
 78a:	91 1d       	adc	r25, r1
 78c:	b2 9f       	mul	r27, r18
 78e:	70 0d       	add	r23, r0
 790:	81 1d       	adc	r24, r1
 792:	11 24       	eor	r1, r1
 794:	91 1d       	adc	r25, r1
 796:	08 95       	ret

00000798 <_exit>:
 798:	f8 94       	cli

0000079a <__stop_program>:
 79a:	ff cf       	rjmp	.-2      	; 0x79a <__stop_program>
