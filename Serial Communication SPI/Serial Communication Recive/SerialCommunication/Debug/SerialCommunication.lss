
SerialCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000092c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000105d  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000945  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e7  00000000  00000000  000024aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c2  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b9  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000047f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  8a:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SSD_Init_BCD>:
		SSD_Display_BCD(number/10);
		Gpio_PinWrite(ssd_Enable_PORT,ssd2_Enable_Pin,FALSE);
		Gpio_PinWrite(ssd_Enable_PORT,ssd1_Enable_Pin,TRUE);
		SSD_Display_BCD(number%10);
	}
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6f ef       	ldi	r22, 0xFF	; 255
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 0a 02 	call	0x414	; 0x414 <Gpio_LowerNibbleDirection>
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	88 2f       	mov	r24, r24
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	b9 f0       	breq	.+46     	; 0xe0 <SSD_Init_BCD+0x4e>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	91 05       	cpc	r25, r1
  b6:	1c f4       	brge	.+6      	; 0xbe <SSD_Init_BCD+0x2c>
  b8:	89 2b       	or	r24, r25
  ba:	39 f0       	breq	.+14     	; 0xca <SSD_Init_BCD+0x38>
  bc:	32 c0       	rjmp	.+100    	; 0x122 <SSD_Init_BCD+0x90>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	c9 f0       	breq	.+50     	; 0xf6 <SSD_Init_BCD+0x64>
  c4:	03 97       	sbiw	r24, 0x03	; 3
  c6:	11 f1       	breq	.+68     	; 0x10c <SSD_Init_BCD+0x7a>
  c8:	2c c0       	rjmp	.+88     	; 0x122 <SSD_Init_BCD+0x90>
  ca:	4f ef       	ldi	r20, 0xFF	; 255
  cc:	64 e0       	ldi	r22, 0x04	; 4
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	64 e0       	ldi	r22, 0x04	; 4
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Gpio_PinWrite>
  de:	21 c0       	rjmp	.+66     	; 0x122 <SSD_Init_BCD+0x90>
  e0:	4f ef       	ldi	r20, 0xFF	; 255
  e2:	68 e0       	ldi	r22, 0x08	; 8
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Gpio_PinWrite>
  f4:	16 c0       	rjmp	.+44     	; 0x122 <SSD_Init_BCD+0x90>
  f6:	4f ef       	ldi	r20, 0xFF	; 255
  f8:	60 e4       	ldi	r22, 0x40	; 64
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	60 e4       	ldi	r22, 0x40	; 64
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Gpio_PinWrite>
 10a:	0b c0       	rjmp	.+22     	; 0x122 <SSD_Init_BCD+0x90>
 10c:	4f ef       	ldi	r20, 0xFF	; 255
 10e:	60 e8       	ldi	r22, 0x80	; 128
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	60 e8       	ldi	r22, 0x80	; 128
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Gpio_PinWrite>
 120:	00 00       	nop
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 99 00 	call	0x132	; 0x132 <SSD_Display_BCD>
 128:	00 00       	nop
 12a:	0f 90       	pop	r0
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <SSD_Display_BCD>:
/**
 * Description: Function to set the Lower Nibble to the value of the number 
 * @param number the number to display [0 to F only]
 */
void SSD_Display_BCD(uint8 number)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	1f 92       	push	r1
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	89 83       	std	Y+1, r24	; 0x01
	Gpio_LowerNibbleDirection(SSD_PORT,SET_OUT);
 13e:	6f ef       	ldi	r22, 0xFF	; 255
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 0a 02 	call	0x414	; 0x414 <Gpio_LowerNibbleDirection>
	Gpio_LowerNibbleWrite(SSD_PORT,number);
 146:	69 81       	ldd	r22, Y+1	; 0x01
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 a3 02 	call	0x546	; 0x546 <Gpio_LowerNibbleWrite>
}
 14e:	00 00       	nop
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <main>:
#include "SPI_Lcfg.h"
#include "Gpio.h"
#include "SSD.h"

int main(void)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	1f 92       	push	r1
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
	uint8 data;
	SPI_Init(&SPI_Cfg_s);
 162:	80 e6       	ldi	r24, 0x60	; 96
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 0b 03 	call	0x616	; 0x616 <SPI_Init>
	SSD_Init_BCD(ssd1);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 49 00 	call	0x92	; 0x92 <SSD_Init_BCD>
    while (TRUE) 
    {
		data = SPI_Receive();
 170:	0e 94 41 04 	call	0x882	; 0x882 <SPI_Receive>
 174:	89 83       	std	Y+1, r24	; 0x01
		SSD_Display_BCD(data);
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	0e 94 99 00 	call	0x132	; 0x132 <SSD_Display_BCD>
	}
 17c:	f9 cf       	rjmp	.-14     	; 0x170 <main+0x18>

0000017e <Gpio_PinDirection>:
		case MYPORTD :
		result = (PIN_D >> 4);
		break;
	}
	return result;
}
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <Gpio_PinDirection+0x6>
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	6a 83       	std	Y+2, r22	; 0x02
 18e:	4b 83       	std	Y+3, r20	; 0x03
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	91 05       	cpc	r25, r1
 19a:	81 f1       	breq	.+96     	; 0x1fc <Gpio_PinDirection+0x7e>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	91 05       	cpc	r25, r1
 1a0:	1c f4       	brge	.+6      	; 0x1a8 <Gpio_PinDirection+0x2a>
 1a2:	89 2b       	or	r24, r25
 1a4:	49 f0       	breq	.+18     	; 0x1b8 <Gpio_PinDirection+0x3a>
 1a6:	90 c0       	rjmp	.+288    	; 0x2c8 <Gpio_PinDirection+0x14a>
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	91 05       	cpc	r25, r1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <Gpio_PinDirection+0x32>
 1ae:	48 c0       	rjmp	.+144    	; 0x240 <Gpio_PinDirection+0xc2>
 1b0:	03 97       	sbiw	r24, 0x03	; 3
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <Gpio_PinDirection+0x38>
 1b4:	67 c0       	rjmp	.+206    	; 0x284 <Gpio_PinDirection+0x106>
 1b6:	88 c0       	rjmp	.+272    	; 0x2c8 <Gpio_PinDirection+0x14a>
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	21 f0       	breq	.+8      	; 0x1ca <Gpio_PinDirection+0x4c>
 1c2:	8f 3f       	cpi	r24, 0xFF	; 255
 1c4:	91 05       	cpc	r25, r1
 1c6:	71 f0       	breq	.+28     	; 0x1e4 <Gpio_PinDirection+0x66>
 1c8:	7f c0       	rjmp	.+254    	; 0x2c8 <Gpio_PinDirection+0x14a>
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	2a e3       	ldi	r18, 0x3A	; 58
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	20 81       	ld	r18, Z
 1d6:	32 2f       	mov	r19, r18
 1d8:	2a 81       	ldd	r18, Y+2	; 0x02
 1da:	20 95       	com	r18
 1dc:	23 23       	and	r18, r19
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
 1e2:	0b c0       	rjmp	.+22     	; 0x1fa <Gpio_PinDirection+0x7c>
 1e4:	8a e3       	ldi	r24, 0x3A	; 58
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	2a e3       	ldi	r18, 0x3A	; 58
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	f9 01       	movw	r30, r18
 1ee:	30 81       	ld	r19, Z
 1f0:	2a 81       	ldd	r18, Y+2	; 0x02
 1f2:	23 2b       	or	r18, r19
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
 1f8:	00 00       	nop
 1fa:	66 c0       	rjmp	.+204    	; 0x2c8 <Gpio_PinDirection+0x14a>
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	88 2f       	mov	r24, r24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	21 f0       	breq	.+8      	; 0x20e <Gpio_PinDirection+0x90>
 206:	8f 3f       	cpi	r24, 0xFF	; 255
 208:	91 05       	cpc	r25, r1
 20a:	71 f0       	breq	.+28     	; 0x228 <Gpio_PinDirection+0xaa>
 20c:	5d c0       	rjmp	.+186    	; 0x2c8 <Gpio_PinDirection+0x14a>
 20e:	87 e3       	ldi	r24, 0x37	; 55
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	27 e3       	ldi	r18, 0x37	; 55
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	f9 01       	movw	r30, r18
 218:	20 81       	ld	r18, Z
 21a:	32 2f       	mov	r19, r18
 21c:	2a 81       	ldd	r18, Y+2	; 0x02
 21e:	20 95       	com	r18
 220:	23 23       	and	r18, r19
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
 226:	0b c0       	rjmp	.+22     	; 0x23e <Gpio_PinDirection+0xc0>
 228:	87 e3       	ldi	r24, 0x37	; 55
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	27 e3       	ldi	r18, 0x37	; 55
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	f9 01       	movw	r30, r18
 232:	30 81       	ld	r19, Z
 234:	2a 81       	ldd	r18, Y+2	; 0x02
 236:	23 2b       	or	r18, r19
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
 23c:	00 00       	nop
 23e:	44 c0       	rjmp	.+136    	; 0x2c8 <Gpio_PinDirection+0x14a>
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	00 97       	sbiw	r24, 0x00	; 0
 248:	21 f0       	breq	.+8      	; 0x252 <Gpio_PinDirection+0xd4>
 24a:	8f 3f       	cpi	r24, 0xFF	; 255
 24c:	91 05       	cpc	r25, r1
 24e:	71 f0       	breq	.+28     	; 0x26c <Gpio_PinDirection+0xee>
 250:	3b c0       	rjmp	.+118    	; 0x2c8 <Gpio_PinDirection+0x14a>
 252:	84 e3       	ldi	r24, 0x34	; 52
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	24 e3       	ldi	r18, 0x34	; 52
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	20 81       	ld	r18, Z
 25e:	32 2f       	mov	r19, r18
 260:	2a 81       	ldd	r18, Y+2	; 0x02
 262:	20 95       	com	r18
 264:	23 23       	and	r18, r19
 266:	fc 01       	movw	r30, r24
 268:	20 83       	st	Z, r18
 26a:	0b c0       	rjmp	.+22     	; 0x282 <Gpio_PinDirection+0x104>
 26c:	84 e3       	ldi	r24, 0x34	; 52
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	24 e3       	ldi	r18, 0x34	; 52
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	30 81       	ld	r19, Z
 278:	2a 81       	ldd	r18, Y+2	; 0x02
 27a:	23 2b       	or	r18, r19
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
 280:	00 00       	nop
 282:	22 c0       	rjmp	.+68     	; 0x2c8 <Gpio_PinDirection+0x14a>
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	88 2f       	mov	r24, r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	21 f0       	breq	.+8      	; 0x296 <Gpio_PinDirection+0x118>
 28e:	8f 3f       	cpi	r24, 0xFF	; 255
 290:	91 05       	cpc	r25, r1
 292:	71 f0       	breq	.+28     	; 0x2b0 <Gpio_PinDirection+0x132>
 294:	18 c0       	rjmp	.+48     	; 0x2c6 <Gpio_PinDirection+0x148>
 296:	81 e3       	ldi	r24, 0x31	; 49
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	21 e3       	ldi	r18, 0x31	; 49
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	32 2f       	mov	r19, r18
 2a4:	2a 81       	ldd	r18, Y+2	; 0x02
 2a6:	20 95       	com	r18
 2a8:	23 23       	and	r18, r19
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <Gpio_PinDirection+0x148>
 2b0:	81 e3       	ldi	r24, 0x31	; 49
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	21 e3       	ldi	r18, 0x31	; 49
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	30 81       	ld	r19, Z
 2bc:	2a 81       	ldd	r18, Y+2	; 0x02
 2be:	23 2b       	or	r18, r19
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
 2c4:	00 00       	nop
 2c6:	00 00       	nop
 2c8:	00 00       	nop
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <Gpio_PinWrite>:
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <Gpio_PinWrite+0x6>
 2dc:	1f 92       	push	r1
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	89 83       	std	Y+1, r24	; 0x01
 2e4:	6a 83       	std	Y+2, r22	; 0x02
 2e6:	4b 83       	std	Y+3, r20	; 0x03
 2e8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <Gpio_PinWrite+0x1e>
 2f2:	42 c0       	rjmp	.+132    	; 0x378 <Gpio_PinWrite+0xa2>
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	09 f0       	breq	.+2      	; 0x2fa <Gpio_PinWrite+0x24>
 2f8:	86 c0       	rjmp	.+268    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	91 05       	cpc	r25, r1
 304:	b9 f0       	breq	.+46     	; 0x334 <Gpio_PinWrite+0x5e>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	91 05       	cpc	r25, r1
 30a:	1c f4       	brge	.+6      	; 0x312 <Gpio_PinWrite+0x3c>
 30c:	89 2b       	or	r24, r25
 30e:	39 f0       	breq	.+14     	; 0x31e <Gpio_PinWrite+0x48>
 310:	7a c0       	rjmp	.+244    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	91 05       	cpc	r25, r1
 316:	c9 f0       	breq	.+50     	; 0x34a <Gpio_PinWrite+0x74>
 318:	03 97       	sbiw	r24, 0x03	; 3
 31a:	11 f1       	breq	.+68     	; 0x360 <Gpio_PinWrite+0x8a>
 31c:	74 c0       	rjmp	.+232    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 31e:	8b e3       	ldi	r24, 0x3B	; 59
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	2b e3       	ldi	r18, 0x3B	; 59
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	30 81       	ld	r19, Z
 32a:	2a 81       	ldd	r18, Y+2	; 0x02
 32c:	23 2b       	or	r18, r19
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
 332:	21 c0       	rjmp	.+66     	; 0x376 <Gpio_PinWrite+0xa0>
 334:	88 e3       	ldi	r24, 0x38	; 56
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	28 e3       	ldi	r18, 0x38	; 56
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	f9 01       	movw	r30, r18
 33e:	30 81       	ld	r19, Z
 340:	2a 81       	ldd	r18, Y+2	; 0x02
 342:	23 2b       	or	r18, r19
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
 348:	16 c0       	rjmp	.+44     	; 0x376 <Gpio_PinWrite+0xa0>
 34a:	85 e3       	ldi	r24, 0x35	; 53
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	25 e3       	ldi	r18, 0x35	; 53
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	30 81       	ld	r19, Z
 356:	2a 81       	ldd	r18, Y+2	; 0x02
 358:	23 2b       	or	r18, r19
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
 35e:	0b c0       	rjmp	.+22     	; 0x376 <Gpio_PinWrite+0xa0>
 360:	82 e3       	ldi	r24, 0x32	; 50
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	22 e3       	ldi	r18, 0x32	; 50
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	f9 01       	movw	r30, r18
 36a:	30 81       	ld	r19, Z
 36c:	2a 81       	ldd	r18, Y+2	; 0x02
 36e:	23 2b       	or	r18, r19
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18
 374:	00 00       	nop
 376:	47 c0       	rjmp	.+142    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	88 2f       	mov	r24, r24
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	91 05       	cpc	r25, r1
 382:	c9 f0       	breq	.+50     	; 0x3b6 <Gpio_PinWrite+0xe0>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	91 05       	cpc	r25, r1
 388:	1c f4       	brge	.+6      	; 0x390 <Gpio_PinWrite+0xba>
 38a:	89 2b       	or	r24, r25
 38c:	39 f0       	breq	.+14     	; 0x39c <Gpio_PinWrite+0xc6>
 38e:	3a c0       	rjmp	.+116    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	91 05       	cpc	r25, r1
 394:	e9 f0       	breq	.+58     	; 0x3d0 <Gpio_PinWrite+0xfa>
 396:	03 97       	sbiw	r24, 0x03	; 3
 398:	41 f1       	breq	.+80     	; 0x3ea <Gpio_PinWrite+0x114>
 39a:	34 c0       	rjmp	.+104    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 39c:	8b e3       	ldi	r24, 0x3B	; 59
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	2b e3       	ldi	r18, 0x3B	; 59
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	f9 01       	movw	r30, r18
 3a6:	20 81       	ld	r18, Z
 3a8:	32 2f       	mov	r19, r18
 3aa:	2a 81       	ldd	r18, Y+2	; 0x02
 3ac:	20 95       	com	r18
 3ae:	23 23       	and	r18, r19
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
 3b4:	27 c0       	rjmp	.+78     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3b6:	88 e3       	ldi	r24, 0x38	; 56
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	28 e3       	ldi	r18, 0x38	; 56
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	f9 01       	movw	r30, r18
 3c0:	20 81       	ld	r18, Z
 3c2:	32 2f       	mov	r19, r18
 3c4:	2a 81       	ldd	r18, Y+2	; 0x02
 3c6:	20 95       	com	r18
 3c8:	23 23       	and	r18, r19
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
 3ce:	1a c0       	rjmp	.+52     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d0:	85 e3       	ldi	r24, 0x35	; 53
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	25 e3       	ldi	r18, 0x35	; 53
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	f9 01       	movw	r30, r18
 3da:	20 81       	ld	r18, Z
 3dc:	32 2f       	mov	r19, r18
 3de:	2a 81       	ldd	r18, Y+2	; 0x02
 3e0:	20 95       	com	r18
 3e2:	23 23       	and	r18, r19
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
 3e8:	0d c0       	rjmp	.+26     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ea:	82 e3       	ldi	r24, 0x32	; 50
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	22 e3       	ldi	r18, 0x32	; 50
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	32 2f       	mov	r19, r18
 3f8:	2a 81       	ldd	r18, Y+2	; 0x02
 3fa:	20 95       	com	r18
 3fc:	23 23       	and	r18, r19
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
 402:	00 00       	nop
 404:	00 00       	nop
 406:	00 00       	nop
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <Gpio_LowerNibbleDirection>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	00 d0       	rcall	.+0      	; 0x41a <Gpio_LowerNibbleDirection+0x6>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	89 83       	std	Y+1, r24	; 0x01
 420:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	91 05       	cpc	r25, r1
 42c:	61 f1       	breq	.+88     	; 0x486 <Gpio_LowerNibbleDirection+0x72>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	91 05       	cpc	r25, r1
 432:	1c f4       	brge	.+6      	; 0x43a <Gpio_LowerNibbleDirection+0x26>
 434:	89 2b       	or	r24, r25
 436:	49 f0       	breq	.+18     	; 0x44a <Gpio_LowerNibbleDirection+0x36>
				break;
			}
		}
		break;
	}
}
 438:	80 c0       	rjmp	.+256    	; 0x53a <Gpio_LowerNibbleDirection+0x126>
 * @param direction : The Direction of the LowerNibble >> {SET_IN , SET_OUT}
 * Return : void
 */
void Gpio_LowerNibbleDirection(uint8 port, uint8 direction)
{
	switch(port)
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	91 05       	cpc	r25, r1
 43e:	09 f4       	brne	.+2      	; 0x442 <Gpio_LowerNibbleDirection+0x2e>
 440:	40 c0       	rjmp	.+128    	; 0x4c2 <Gpio_LowerNibbleDirection+0xae>
 442:	03 97       	sbiw	r24, 0x03	; 3
 444:	09 f4       	brne	.+2      	; 0x448 <Gpio_LowerNibbleDirection+0x34>
 446:	5b c0       	rjmp	.+182    	; 0x4fe <Gpio_LowerNibbleDirection+0xea>
				break;
			}
		}
		break;
	}
}
 448:	78 c0       	rjmp	.+240    	; 0x53a <Gpio_LowerNibbleDirection+0x126>
{
	switch(port)
	{
		case MYPORTA :
		{
			switch(direction)
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	88 2f       	mov	r24, r24
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	00 97       	sbiw	r24, 0x00	; 0
 452:	21 f0       	breq	.+8      	; 0x45c <Gpio_LowerNibbleDirection+0x48>
 454:	8f 3f       	cpi	r24, 0xFF	; 255
 456:	91 05       	cpc	r25, r1
 458:	59 f0       	breq	.+22     	; 0x470 <Gpio_LowerNibbleDirection+0x5c>
				case SET_OUT :
				DDR_A |= 0x0f;
				break;
			}
		}
		break;
 45a:	6f c0       	rjmp	.+222    	; 0x53a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTA :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_A &= 0xf0;
 45c:	8a e3       	ldi	r24, 0x3A	; 58
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	2a e3       	ldi	r18, 0x3A	; 58
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	f9 01       	movw	r30, r18
 466:	20 81       	ld	r18, Z
 468:	20 7f       	andi	r18, 0xF0	; 240
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
				break;
 46e:	0a c0       	rjmp	.+20     	; 0x484 <Gpio_LowerNibbleDirection+0x70>
				case SET_OUT :
				DDR_A |= 0x0f;
 470:	8a e3       	ldi	r24, 0x3A	; 58
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	2a e3       	ldi	r18, 0x3A	; 58
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	f9 01       	movw	r30, r18
 47a:	20 81       	ld	r18, Z
 47c:	2f 60       	ori	r18, 0x0F	; 15
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
				break;
 482:	00 00       	nop
			}
		}
		break;
 484:	5a c0       	rjmp	.+180    	; 0x53a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	88 2f       	mov	r24, r24
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	21 f0       	breq	.+8      	; 0x498 <Gpio_LowerNibbleDirection+0x84>
 490:	8f 3f       	cpi	r24, 0xFF	; 255
 492:	91 05       	cpc	r25, r1
 494:	59 f0       	breq	.+22     	; 0x4ac <Gpio_LowerNibbleDirection+0x98>
				case SET_OUT :
				DDR_B |= 0x0f;
				break;
			}
		}
		break;
 496:	51 c0       	rjmp	.+162    	; 0x53a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTB :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_B &= 0xf0;
 498:	87 e3       	ldi	r24, 0x37	; 55
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	27 e3       	ldi	r18, 0x37	; 55
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	20 7f       	andi	r18, 0xF0	; 240
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
				break;
 4aa:	0a c0       	rjmp	.+20     	; 0x4c0 <Gpio_LowerNibbleDirection+0xac>
				case SET_OUT :
				DDR_B |= 0x0f;
 4ac:	87 e3       	ldi	r24, 0x37	; 55
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	27 e3       	ldi	r18, 0x37	; 55
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	f9 01       	movw	r30, r18
 4b6:	20 81       	ld	r18, Z
 4b8:	2f 60       	ori	r18, 0x0F	; 15
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
				break;
 4be:	00 00       	nop
			}
		}
		break;
 4c0:	3c c0       	rjmp	.+120    	; 0x53a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
 4c2:	8a 81       	ldd	r24, Y+2	; 0x02
 4c4:	88 2f       	mov	r24, r24
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	21 f0       	breq	.+8      	; 0x4d4 <Gpio_LowerNibbleDirection+0xc0>
 4cc:	8f 3f       	cpi	r24, 0xFF	; 255
 4ce:	91 05       	cpc	r25, r1
 4d0:	59 f0       	breq	.+22     	; 0x4e8 <Gpio_LowerNibbleDirection+0xd4>
				case SET_OUT :
				DDR_C |= 0x0f;
				break;
			}
		}
		break;
 4d2:	33 c0       	rjmp	.+102    	; 0x53a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTC :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_C &= 0xf0;
 4d4:	84 e3       	ldi	r24, 0x34	; 52
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	24 e3       	ldi	r18, 0x34	; 52
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	20 7f       	andi	r18, 0xF0	; 240
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
				break;
 4e6:	0a c0       	rjmp	.+20     	; 0x4fc <Gpio_LowerNibbleDirection+0xe8>
				case SET_OUT :
				DDR_C |= 0x0f;
 4e8:	84 e3       	ldi	r24, 0x34	; 52
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	24 e3       	ldi	r18, 0x34	; 52
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	20 81       	ld	r18, Z
 4f4:	2f 60       	ori	r18, 0x0F	; 15
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
				break;
 4fa:	00 00       	nop
			}
		}
		break;
 4fc:	1e c0       	rjmp	.+60     	; 0x53a <Gpio_LowerNibbleDirection+0x126>
		case MYPORTD :
		{
			switch(direction)
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	00 97       	sbiw	r24, 0x00	; 0
 506:	21 f0       	breq	.+8      	; 0x510 <Gpio_LowerNibbleDirection+0xfc>
 508:	8f 3f       	cpi	r24, 0xFF	; 255
 50a:	91 05       	cpc	r25, r1
 50c:	59 f0       	breq	.+22     	; 0x524 <Gpio_LowerNibbleDirection+0x110>
				case SET_OUT :
				DDR_D |= 0x0f;
				break;
			}
		}
		break;
 50e:	14 c0       	rjmp	.+40     	; 0x538 <Gpio_LowerNibbleDirection+0x124>
		case MYPORTD :
		{
			switch(direction)
			{
				case SET_IN :
				DDR_D &= 0xf0;
 510:	81 e3       	ldi	r24, 0x31	; 49
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	21 e3       	ldi	r18, 0x31	; 49
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	f9 01       	movw	r30, r18
 51a:	20 81       	ld	r18, Z
 51c:	20 7f       	andi	r18, 0xF0	; 240
 51e:	fc 01       	movw	r30, r24
 520:	20 83       	st	Z, r18
				break;
 522:	0a c0       	rjmp	.+20     	; 0x538 <Gpio_LowerNibbleDirection+0x124>
				case SET_OUT :
				DDR_D |= 0x0f;
 524:	81 e3       	ldi	r24, 0x31	; 49
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	21 e3       	ldi	r18, 0x31	; 49
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	f9 01       	movw	r30, r18
 52e:	20 81       	ld	r18, Z
 530:	2f 60       	ori	r18, 0x0F	; 15
 532:	fc 01       	movw	r30, r24
 534:	20 83       	st	Z, r18
				break;
 536:	00 00       	nop
			}
		}
		break;
 538:	00 00       	nop
	}
}
 53a:	00 00       	nop
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <Gpio_LowerNibbleWrite>:
 * @param port : the port that includes the LowerNibble {MYPORTA,MYPORTB,MYPORTC,MYPORTD}
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	00 d0       	rcall	.+0      	; 0x54c <Gpio_LowerNibbleWrite+0x6>
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	89 83       	std	Y+1, r24	; 0x01
 552:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	88 2f       	mov	r24, r24
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	91 05       	cpc	r25, r1
 55e:	d1 f0       	breq	.+52     	; 0x594 <Gpio_LowerNibbleWrite+0x4e>
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	91 05       	cpc	r25, r1
 564:	1c f4       	brge	.+6      	; 0x56c <Gpio_LowerNibbleWrite+0x26>
 566:	89 2b       	or	r24, r25
 568:	39 f0       	breq	.+14     	; 0x578 <Gpio_LowerNibbleWrite+0x32>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
 56a:	3e c0       	rjmp	.+124    	; 0x5e8 <Gpio_LowerNibbleWrite+0xa2>
 * @param value : The value of the LowerNibble
 * Return : void
 */
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	91 05       	cpc	r25, r1
 570:	f9 f0       	breq	.+62     	; 0x5b0 <Gpio_LowerNibbleWrite+0x6a>
 572:	03 97       	sbiw	r24, 0x03	; 3
 574:	59 f1       	breq	.+86     	; 0x5cc <Gpio_LowerNibbleWrite+0x86>
		break;
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
		break;
	}
}
 576:	38 c0       	rjmp	.+112    	; 0x5e8 <Gpio_LowerNibbleWrite+0xa2>
void Gpio_LowerNibbleWrite(uint8 port, uint8 value)
{
	switch(port)
	{
		case MYPORTA :
		PORT_A = (PORT_A & 0xf0) | (value & 0x0f);
 578:	8b e3       	ldi	r24, 0x3B	; 59
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	2b e3       	ldi	r18, 0x3B	; 59
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	f9 01       	movw	r30, r18
 582:	20 81       	ld	r18, Z
 584:	32 2f       	mov	r19, r18
 586:	30 7f       	andi	r19, 0xF0	; 240
 588:	2a 81       	ldd	r18, Y+2	; 0x02
 58a:	2f 70       	andi	r18, 0x0F	; 15
 58c:	23 2b       	or	r18, r19
 58e:	fc 01       	movw	r30, r24
 590:	20 83       	st	Z, r18
		break;
 592:	2a c0       	rjmp	.+84     	; 0x5e8 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTB :
		PORT_B = (PORT_B & 0xf0) | (value & 0x0f);
 594:	88 e3       	ldi	r24, 0x38	; 56
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	28 e3       	ldi	r18, 0x38	; 56
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	f9 01       	movw	r30, r18
 59e:	20 81       	ld	r18, Z
 5a0:	32 2f       	mov	r19, r18
 5a2:	30 7f       	andi	r19, 0xF0	; 240
 5a4:	2a 81       	ldd	r18, Y+2	; 0x02
 5a6:	2f 70       	andi	r18, 0x0F	; 15
 5a8:	23 2b       	or	r18, r19
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
		break;
 5ae:	1c c0       	rjmp	.+56     	; 0x5e8 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTC :
		PORT_C = (PORT_C & 0xf0) | (value & 0x0f);
 5b0:	85 e3       	ldi	r24, 0x35	; 53
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	25 e3       	ldi	r18, 0x35	; 53
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	32 2f       	mov	r19, r18
 5be:	30 7f       	andi	r19, 0xF0	; 240
 5c0:	2a 81       	ldd	r18, Y+2	; 0x02
 5c2:	2f 70       	andi	r18, 0x0F	; 15
 5c4:	23 2b       	or	r18, r19
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
		break;
 5ca:	0e c0       	rjmp	.+28     	; 0x5e8 <Gpio_LowerNibbleWrite+0xa2>
		case MYPORTD :
		PORT_D = (PORT_D & 0xf0) | (value & 0x0f);
 5cc:	82 e3       	ldi	r24, 0x32	; 50
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	22 e3       	ldi	r18, 0x32	; 50
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	f9 01       	movw	r30, r18
 5d6:	20 81       	ld	r18, Z
 5d8:	32 2f       	mov	r19, r18
 5da:	30 7f       	andi	r19, 0xF0	; 240
 5dc:	2a 81       	ldd	r18, Y+2	; 0x02
 5de:	2f 70       	andi	r18, 0x0F	; 15
 5e0:	23 2b       	or	r18, r19
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
		break;
 5e6:	00 00       	nop
	}
}
 5e8:	00 00       	nop
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <Interrupts_On>:
 * Description : This function is used to turn On the global interrupt mask
 * Return : the function Returns nothing
 */

void Interrupts_On(void)
{     
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GIE);
 5fc:	8f e5       	ldi	r24, 0x5F	; 95
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	2f e5       	ldi	r18, 0x5F	; 95
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	f9 01       	movw	r30, r18
 606:	20 81       	ld	r18, Z
 608:	20 68       	ori	r18, 0x80	; 128
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
}
 60e:	00 00       	nop
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <SPI_Init>:
uint8 SPI_Send(uint8 data)
{
	SPI_SPDR = data;
	while(GET_BIT(SPI_SPSR,SPIF) == FALSE);
	return OK;
}
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 d0       	rcall	.+0      	; 0x61c <SPI_Init+0x6>
 61c:	1f 92       	push	r1
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	9b 83       	std	Y+3, r25	; 0x03
 624:	8a 83       	std	Y+2, r24	; 0x02
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	89 83       	std	Y+1, r24	; 0x01
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	9b 81       	ldd	r25, Y+3	; 0x03
 62e:	fc 01       	movw	r30, r24
 630:	80 81       	ld	r24, Z
 632:	88 2f       	mov	r24, r24
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	00 97       	sbiw	r24, 0x00	; 0
 638:	d9 f0       	breq	.+54     	; 0x670 <SPI_Init+0x5a>
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	41 f5       	brne	.+80     	; 0x68e <SPI_Init+0x78>
 63e:	4f ef       	ldi	r20, 0xFF	; 255
 640:	60 e1       	ldi	r22, 0x10	; 16
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
 648:	4f ef       	ldi	r20, 0xFF	; 255
 64a:	60 e2       	ldi	r22, 0x20	; 32
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
 652:	4f ef       	ldi	r20, 0xFF	; 255
 654:	60 e8       	ldi	r22, 0x80	; 128
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
 65c:	8d e2       	ldi	r24, 0x2D	; 45
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	2d e2       	ldi	r18, 0x2D	; 45
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	20 61       	ori	r18, 0x10	; 16
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
 66e:	11 c0       	rjmp	.+34     	; 0x692 <SPI_Init+0x7c>
 670:	4f ef       	ldi	r20, 0xFF	; 255
 672:	60 e4       	ldi	r22, 0x40	; 64
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 bf 00 	call	0x17e	; 0x17e <Gpio_PinDirection>
 67a:	8d e2       	ldi	r24, 0x2D	; 45
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	2d e2       	ldi	r18, 0x2D	; 45
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	f9 01       	movw	r30, r18
 684:	20 81       	ld	r18, Z
 686:	2f 7e       	andi	r18, 0xEF	; 239
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <SPI_Init+0x7c>
 68e:	19 82       	std	Y+1, r1	; 0x01
 690:	00 00       	nop
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	9b 81       	ldd	r25, Y+3	; 0x03
 696:	fc 01       	movw	r30, r24
 698:	81 81       	ldd	r24, Z+1	; 0x01
 69a:	88 2f       	mov	r24, r24
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	19 f0       	breq	.+6      	; 0x6a8 <SPI_Init+0x92>
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	59 f0       	breq	.+22     	; 0x6bc <SPI_Init+0xa6>
 6a6:	14 c0       	rjmp	.+40     	; 0x6d0 <SPI_Init+0xba>
 6a8:	8d e2       	ldi	r24, 0x2D	; 45
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	2d e2       	ldi	r18, 0x2D	; 45
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	f9 01       	movw	r30, r18
 6b2:	20 81       	ld	r18, Z
 6b4:	27 7f       	andi	r18, 0xF7	; 247
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
 6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <SPI_Init+0xbe>
 6bc:	8d e2       	ldi	r24, 0x2D	; 45
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	2d e2       	ldi	r18, 0x2D	; 45
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	f9 01       	movw	r30, r18
 6c6:	20 81       	ld	r18, Z
 6c8:	28 60       	ori	r18, 0x08	; 8
 6ca:	fc 01       	movw	r30, r24
 6cc:	20 83       	st	Z, r18
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <SPI_Init+0xbe>
 6d0:	19 82       	std	Y+1, r1	; 0x01
 6d2:	00 00       	nop
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	9b 81       	ldd	r25, Y+3	; 0x03
 6d8:	fc 01       	movw	r30, r24
 6da:	82 81       	ldd	r24, Z+2	; 0x02
 6dc:	88 2f       	mov	r24, r24
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	71 f0       	breq	.+28     	; 0x700 <SPI_Init+0xea>
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	b1 f4       	brne	.+44     	; 0x714 <SPI_Init+0xfe>
 6e8:	8d e2       	ldi	r24, 0x2D	; 45
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	2d e2       	ldi	r18, 0x2D	; 45
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	f9 01       	movw	r30, r18
 6f2:	20 81       	ld	r18, Z
 6f4:	20 68       	ori	r18, 0x80	; 128
 6f6:	fc 01       	movw	r30, r24
 6f8:	20 83       	st	Z, r18
 6fa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Interrupts_On>
 6fe:	0c c0       	rjmp	.+24     	; 0x718 <SPI_Init+0x102>
 700:	8d e2       	ldi	r24, 0x2D	; 45
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	2d e2       	ldi	r18, 0x2D	; 45
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	f9 01       	movw	r30, r18
 70a:	20 81       	ld	r18, Z
 70c:	2f 77       	andi	r18, 0x7F	; 127
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <SPI_Init+0x102>
 714:	19 82       	std	Y+1, r1	; 0x01
 716:	00 00       	nop
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	9b 81       	ldd	r25, Y+3	; 0x03
 71c:	fc 01       	movw	r30, r24
 71e:	83 81       	ldd	r24, Z+3	; 0x03
 720:	88 2f       	mov	r24, r24
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	00 97       	sbiw	r24, 0x00	; 0
 726:	19 f0       	breq	.+6      	; 0x72e <SPI_Init+0x118>
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	59 f0       	breq	.+22     	; 0x742 <SPI_Init+0x12c>
 72c:	14 c0       	rjmp	.+40     	; 0x756 <SPI_Init+0x140>
 72e:	8d e2       	ldi	r24, 0x2D	; 45
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	2d e2       	ldi	r18, 0x2D	; 45
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	f9 01       	movw	r30, r18
 738:	20 81       	ld	r18, Z
 73a:	20 62       	ori	r18, 0x20	; 32
 73c:	fc 01       	movw	r30, r24
 73e:	20 83       	st	Z, r18
 740:	0c c0       	rjmp	.+24     	; 0x75a <SPI_Init+0x144>
 742:	8d e2       	ldi	r24, 0x2D	; 45
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	2d e2       	ldi	r18, 0x2D	; 45
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	f9 01       	movw	r30, r18
 74c:	20 81       	ld	r18, Z
 74e:	2f 7d       	andi	r18, 0xDF	; 223
 750:	fc 01       	movw	r30, r24
 752:	20 83       	st	Z, r18
 754:	02 c0       	rjmp	.+4      	; 0x75a <SPI_Init+0x144>
 756:	19 82       	std	Y+1, r1	; 0x01
 758:	00 00       	nop
 75a:	8a 81       	ldd	r24, Y+2	; 0x02
 75c:	9b 81       	ldd	r25, Y+3	; 0x03
 75e:	fc 01       	movw	r30, r24
 760:	84 81       	ldd	r24, Z+4	; 0x04
 762:	88 2f       	mov	r24, r24
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	00 97       	sbiw	r24, 0x00	; 0
 768:	19 f0       	breq	.+6      	; 0x770 <SPI_Init+0x15a>
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	59 f0       	breq	.+22     	; 0x784 <SPI_Init+0x16e>
 76e:	14 c0       	rjmp	.+40     	; 0x798 <SPI_Init+0x182>
 770:	8d e2       	ldi	r24, 0x2D	; 45
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	2d e2       	ldi	r18, 0x2D	; 45
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	f9 01       	movw	r30, r18
 77a:	20 81       	ld	r18, Z
 77c:	2b 7f       	andi	r18, 0xFB	; 251
 77e:	fc 01       	movw	r30, r24
 780:	20 83       	st	Z, r18
 782:	0c c0       	rjmp	.+24     	; 0x79c <SPI_Init+0x186>
 784:	8d e2       	ldi	r24, 0x2D	; 45
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	2d e2       	ldi	r18, 0x2D	; 45
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	f9 01       	movw	r30, r18
 78e:	20 81       	ld	r18, Z
 790:	24 60       	ori	r18, 0x04	; 4
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
 796:	02 c0       	rjmp	.+4      	; 0x79c <SPI_Init+0x186>
 798:	19 82       	std	Y+1, r1	; 0x01
 79a:	00 00       	nop
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	9b 81       	ldd	r25, Y+3	; 0x03
 7a0:	fc 01       	movw	r30, r24
 7a2:	85 81       	ldd	r24, Z+5	; 0x05
 7a4:	88 2f       	mov	r24, r24
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	81 30       	cpi	r24, 0x01	; 1
 7aa:	91 05       	cpc	r25, r1
 7ac:	f9 f0       	breq	.+62     	; 0x7ec <SPI_Init+0x1d6>
 7ae:	82 30       	cpi	r24, 0x02	; 2
 7b0:	91 05       	cpc	r25, r1
 7b2:	1c f4       	brge	.+6      	; 0x7ba <SPI_Init+0x1a4>
 7b4:	89 2b       	or	r24, r25
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <SPI_Init+0x1b0>
 7b8:	52 c0       	rjmp	.+164    	; 0x85e <SPI_Init+0x248>
 7ba:	82 30       	cpi	r24, 0x02	; 2
 7bc:	91 05       	cpc	r25, r1
 7be:	49 f1       	breq	.+82     	; 0x812 <SPI_Init+0x1fc>
 7c0:	03 97       	sbiw	r24, 0x03	; 3
 7c2:	d1 f1       	breq	.+116    	; 0x838 <SPI_Init+0x222>
 7c4:	4c c0       	rjmp	.+152    	; 0x85e <SPI_Init+0x248>
 7c6:	8d e2       	ldi	r24, 0x2D	; 45
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	2d e2       	ldi	r18, 0x2D	; 45
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	f9 01       	movw	r30, r18
 7d0:	20 81       	ld	r18, Z
 7d2:	2e 7f       	andi	r18, 0xFE	; 254
 7d4:	fc 01       	movw	r30, r24
 7d6:	20 83       	st	Z, r18
 7d8:	8d e2       	ldi	r24, 0x2D	; 45
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	2d e2       	ldi	r18, 0x2D	; 45
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	f9 01       	movw	r30, r18
 7e2:	20 81       	ld	r18, Z
 7e4:	2d 7f       	andi	r18, 0xFD	; 253
 7e6:	fc 01       	movw	r30, r24
 7e8:	20 83       	st	Z, r18
 7ea:	3b c0       	rjmp	.+118    	; 0x862 <__stack+0x3>
 7ec:	8d e2       	ldi	r24, 0x2D	; 45
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	2d e2       	ldi	r18, 0x2D	; 45
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	f9 01       	movw	r30, r18
 7f6:	20 81       	ld	r18, Z
 7f8:	21 60       	ori	r18, 0x01	; 1
 7fa:	fc 01       	movw	r30, r24
 7fc:	20 83       	st	Z, r18
 7fe:	8d e2       	ldi	r24, 0x2D	; 45
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	2d e2       	ldi	r18, 0x2D	; 45
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	f9 01       	movw	r30, r18
 808:	20 81       	ld	r18, Z
 80a:	2d 7f       	andi	r18, 0xFD	; 253
 80c:	fc 01       	movw	r30, r24
 80e:	20 83       	st	Z, r18
 810:	28 c0       	rjmp	.+80     	; 0x862 <__stack+0x3>
 812:	8d e2       	ldi	r24, 0x2D	; 45
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	2d e2       	ldi	r18, 0x2D	; 45
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	f9 01       	movw	r30, r18
 81c:	20 81       	ld	r18, Z
 81e:	2e 7f       	andi	r18, 0xFE	; 254
 820:	fc 01       	movw	r30, r24
 822:	20 83       	st	Z, r18
 824:	8d e2       	ldi	r24, 0x2D	; 45
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	2d e2       	ldi	r18, 0x2D	; 45
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	f9 01       	movw	r30, r18
 82e:	20 81       	ld	r18, Z
 830:	22 60       	ori	r18, 0x02	; 2
 832:	fc 01       	movw	r30, r24
 834:	20 83       	st	Z, r18
 836:	15 c0       	rjmp	.+42     	; 0x862 <__stack+0x3>
 838:	8d e2       	ldi	r24, 0x2D	; 45
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	2d e2       	ldi	r18, 0x2D	; 45
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	f9 01       	movw	r30, r18
 842:	20 81       	ld	r18, Z
 844:	21 60       	ori	r18, 0x01	; 1
 846:	fc 01       	movw	r30, r24
 848:	20 83       	st	Z, r18
 84a:	8d e2       	ldi	r24, 0x2D	; 45
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	2d e2       	ldi	r18, 0x2D	; 45
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	f9 01       	movw	r30, r18
 854:	20 81       	ld	r18, Z
 856:	22 60       	ori	r18, 0x02	; 2
 858:	fc 01       	movw	r30, r24
 85a:	20 83       	st	Z, r18
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	19 82       	std	Y+1, r1	; 0x01
 860:	00 00       	nop
 862:	8d e2       	ldi	r24, 0x2D	; 45
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	2d e2       	ldi	r18, 0x2D	; 45
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	f9 01       	movw	r30, r18
 86c:	20 81       	ld	r18, Z
 86e:	20 64       	ori	r18, 0x40	; 64
 870:	fc 01       	movw	r30, r24
 872:	20 83       	st	Z, r18
 874:	89 81       	ldd	r24, Y+1	; 0x01
 876:	0f 90       	pop	r0
 878:	0f 90       	pop	r0
 87a:	0f 90       	pop	r0
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <SPI_Receive>:
 * Description: this function is to Receive a data by the SPI 
 * @param data the symbol to be sent
 * @return the Received data
 */
uint8 SPI_Receive()
{
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(SPI_SPSR,SPIF) == FALSE);
 88a:	00 00       	nop
 88c:	8e e2       	ldi	r24, 0x2E	; 46
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	fc 01       	movw	r30, r24
 892:	80 81       	ld	r24, Z
 894:	88 1f       	adc	r24, r24
 896:	88 27       	eor	r24, r24
 898:	88 1f       	adc	r24, r24
 89a:	88 2f       	mov	r24, r24
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	81 70       	andi	r24, 0x01	; 1
 8a0:	99 27       	eor	r25, r25
 8a2:	89 2b       	or	r24, r25
 8a4:	99 f3       	breq	.-26     	; 0x88c <SPI_Receive+0xa>
	return SPI_SPDR;
 8a6:	8f e2       	ldi	r24, 0x2F	; 47
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	fc 01       	movw	r30, r24
 8ac:	80 81       	ld	r24, Z
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	08 95       	ret

000008b4 <_exit>:
 8b4:	f8 94       	cli

000008b6 <__stop_program>:
 8b6:	ff cf       	rjmp	.-2      	; 0x8b6 <__stop_program>
